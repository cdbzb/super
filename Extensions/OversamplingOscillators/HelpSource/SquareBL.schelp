TITLE:: SquareBL
summary:: Polynomial Bandlimited Square Wave
categories:: UGens>Oscillator
related:: SawBL, SquareBL, TriBL, ImpulseBL, SinOscOS, TriOS, SawOS, SquareOS, VarSawOS, PMOscOS, PM7OS, FM7OS

DESCRIPTION::
A Bandlimited Square wave oscillator based on Julius Smith's PolySaw oscillator in the Faust source. Like the Faust source, it uses a sawtooth combined with a delayed and flipped copy of itself. In the lowest register it acts as an LFPulse


CLASSMETHODS::

METHOD:: ar

ARGUMENT:: freq
frequency - FM is possible

ARGUMENT:: iphase
initial phase

ARGUMENT:: width
width of the square. between 0 and 1, though numbers closer to 0 and 1 get wonky.

ARGUMENT:: mul
mul

ARGUMENT:: add
add


EXAMPLES::

code::
{SquareBL.ar(MouseX.kr(-1000,10000), 0, 0.5, 0.1)}.scope;
{SquareBL.ar(MouseX.kr(-1000,10000), 0, 0.1, 0.1)}.scope;

//it starts funny, there is no way around it:
{SquareBL.ar(100, 0)}.plot(0.05);
{SquareBL.ar(100, 0.5)}.plot(0.05);

//Frequency modulation is possible
({SquareBL.ar(MouseX.kr(200,4000)+
	(LFPulse.ar(MouseY.kr(200,4000))*3000)).dup*0.2
}.play)

//SquareOS, the oversampled Square, might be preferable
({SquareOS.ar(MouseX.kr(200,4000)+
	(LFPulse.ar(MouseY.kr(200,4000))*3000), 0, 0.5, 4).dup*0.2
}.play)

//width can be modulated at audio rate
{SquareBL.ar(100, 0, SinOsc.ar(0.2).range(0.1,0.9), 0.2).dup}.play
{SquareBL.ar(100, 0, SinOsc.ar(10).range(0.1,0.9), 0.2).dup}.play
{SquareBL.ar(100, 0, SinOsc.ar(30).range(0.1,0.9), 0.2).dup}.play
{SquareBL.ar(MouseX.kr(20,400), 0, SinOsc.ar(0.2).range(0.1,0.9), 0.2).dup}.play

//Extreme Modulation is possible.

({
	var locIn=LocalIn.ar(1);
	var feedbackMul = 1000;
	var mod = feedbackMul*SquareBL.ar((MouseY.kr(0, 8000)+(locIn*2000)));

	var car = SquareBL.ar(
		(MouseX.kr(1, 8000)
			+(mod)), 0, SinOsc.ar(30).range(0.1,0.9),1);
	LocalOut.ar(car);
	car.dup*0.2
}.scope)
::
