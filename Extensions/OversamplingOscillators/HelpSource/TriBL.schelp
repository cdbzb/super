TITLE:: TriBL
summary:: Polynomial Bandlimited Triangle Wave
categories:: UGens>Oscillator
related:: SawBL, SquareBL, TriBL, ImpulseBL, SinOscOS, TriOS, SawOS, SquareOS, VarSawOS, PMOscOS, PM7OS, FM7OS

DESCRIPTION::
A Bandlimited Triangle wave oscillator based on Julius Smith's faust implementation using a low-pass filtered Square wave. Works great with higher frequencies, but starts to break down at about 20hz and doesn't deal well with modulation. TriOS is better in almost any situation.

CLASSMETHODS::

METHOD:: ar

ARGUMENT:: freq
frequency - FM is possible

ARGUMENT:: iphase
initial phase

ARGUMENT:: mul
mul

ARGUMENT:: add
add


EXAMPLES::

code::
{TriBL.ar(K2A.ar(MouseX.kr(-1000,10000)), 0, 0.2)}.scope;

//phase offset doesn't really work:
{TriBL.ar(100, 0.5)}.plot(0.1);
{TriBL.ar(100, -0.5)}.plot(0.1);

//Frequency modulation is possible, though it does some weird stuff below 20 hz or so
({TriBL.ar(MouseX.kr(200,4000)+
	(TriBL.ar(MouseY.kr(200,4000))*3000)).dup*0.2
}.scope)

//TriOS, the oversampled Tri, is probably better in almost all situations
({TriOS.ar(MouseX.kr(200,4000)+
	(LFTri.ar(MouseY.kr(200,4000))*3000), 0, 4).dup*0.2
}.scope)

{TriOS.ar(K2A.ar(MouseX.kr(-1000,10000)), 0, 3, 0.2)}.scope;

//Extreme Modulation isn't so great sounding
({
	var locIn=LocalIn.ar(1);
	var feedbackMul = 500;
	var mod = feedbackMul*SinOscOS.ar((MouseY.kr(0, 8000)+(locIn*2000)));

	var car = TriBL.ar(
		(MouseX.kr(1, 500)
			+(mod)), 0,1);
	LocalOut.ar(car);
	car.dup*0.2
}.scope)
::
