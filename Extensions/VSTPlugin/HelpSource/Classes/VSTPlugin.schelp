TITLE:: VSTPlugin
summary:: load VST plugins as UGens
related:: Classes/VSTPluginController, Classes/VSTPluginDesc, Classes/VSTPluginGui, Guides/HOA_IEM, Reference/VSTPlugin-UGen-Documentation
categories:: UGens>FX

DESCRIPTION::

This UGen represents a single VST plugin instance on the link::Classes/Server::. See the helpfile of link::Classes/VSTPluginController:: for how to control it from the SuperCollider language.

VSTPlugin also has class methods to scan a Server for plugins and cache the info in the Client, see link::#Plugin Management::.

CLASSMETHODS::

PRIVATE:: prGetInfo, prProbeLocal, prProbeRemote, prSearchLocal, prSearchRemote, prMakeDest, prMakeTmpPath, prParseIni, prParseInfo, prGetLine, prParseCount, prParseKeyValuePair, prTrim, kr, platformExtension, reset

METHOD:: ar
create a UGen instance.

ARGUMENT:: input
An Array of channels or single input for the plugin to process. You cannot change the size of this once a SynthDef has been built.
Set this to code::nil:: if the plugin takes no audio input (e.g. software synthesizers).

ARGUMENT:: numOut
The number of output channels. This must be a fixed number greater than 0.

ARGUMENT:: bypass
change the bypass state. If bypass is non-zero, then processing is suspended and each input is passed straight to its corresponding output.
table::
## 0 || off (processing)
## 1 || hard bypass; processing is suspended immediately and the plugin's own bypass method is called (if available). Good plugins will do a short crossfade, others will cause a click.
## 2 || soft bypass; if the plugin has a tail (e.g. reverb or delay), it will fade out. This doesn't call the plugin's bypass method, so we can always do a nice crossfade.
::

ARGUMENT:: params
An optional Array of parameter controls in pairs of index and value. Both can be automated.
code::
// 'p1' controls parameter 1.
// 'p2' controls a parameter whose index can be set dynamically with 'idx'.
SynthDef(\test, { arg in, p1, p2, idx;
	var sig = VSTPlugin.ar(In.ar(in, 2), 1,
		params: [1, p1, idx, p2]);
	Out.ar(0, sig);
});
::
You can set the index to a negative value to "unmap" the parameter.

note::emphasis::params:: overrides any automation of the same parameters by link::Classes/VSTPluginController#-set::, but it can itself be overriden with
link::Classes/VSTPluginController#-map::.
::

You can automate parameters with either control and audio rate UGens, but the latter is more CPU expensive and only makes sense
if the plugin actually supports sample accurate automation (some, but not all VST3 plugins).

ARGUMENT:: id
An optional number or symbol which uniquely identifies the UGen within a SynthDef so it can be found by link::Classes/VSTPluginController::.
This is only necessary if there is more than one VSTPlugin instance in the SynthDef!
code::
(
// an EQ and Chorus in parallel:
SynthDef(\test, { arg in, out;
	var sig;
	sig = VSTPlugin.ar(In.ar(in, 2), 2, id: \eq);
	sig = VSTPlugin.ar(sig, 2, id: \chorus);
	Out.ar(out, sig);
}).add;
)
~synth = Synth(\test, [\in, ~in, \out, ~out]);
(
// this is how you get a handle to a specific plugin instance in the Synth:
~eq = VSTPluginController.new(~synth, \eq);
~chorus = VSTPluginController.new(~synth, \chorus);
)
// load plugins, etc:
~eq.open("...");
~chorus.open("...");
::

ARGUMENT:: info
An optional link::Classes/VSTPluginDesc:: instance; the plugin must have been successfully probed (e.g. with link::Classes/VSTPlugin#*search::).

If you know in advance which VST plugin you want to load, this allows you to use parameter names instead of indices
code::
(
SynthDef(\chorus, { arg bus;
	var plugin = VSTPlugin.plugins['GChorus'];
	var sig = VSTPlugin.ar(In.ar(bus, 2), 2, params: [Depth: 0.5, Mix: 0.9], info: plugin);
	ReplaceOut.ar(bus, sig);
}).add;
)
::
Also, you can omit the code::path:: argument when opening plugins:
code::
~fx = VSTPluginController(Synth(\chorus)).open; // will open 'GChorus'
::

ARGUMENT:: auxInput
An Array of channels or a single auxiliary input for the plugin to process. You cannot change the size of this once a SynthDef has been built.
This is only useful for certain VST3 plugins (e.g. for side chaining).

ARGUMENT:: numAuxOut
The number of auxiliary output channels. This must be a fixed number greater or equal 0.
Like code::auxInput::, this is only useful for certain VST3 plugins.


SUBSECTION:: Plugin Management

All VST plugin information is cached in the Client. This is done mainly for performance reasons but it can be also handy for end users
because it's possible to investigate plugins without actually creating any instances.

The plugin info is stored as a link::Classes/VSTPluginDesc:: instance under its key (see link::Classes/VSTPluginDesc#-key::) and can be retrieved with link::#*plugins::.

METHOD:: plugins
get information about (probed) VST plugins on a Server.

ARGUMENT:: server
the Server. If this is code::nil::, the default Server is assumed.

RETURNS:: an link::Classes/IdentityDictionary:: containing the descriptions of all VST plugins on the Server as instances of link::Classes/VSTPluginDesc::.

DISCUSSION::
The dictionary can be simply indexed with plugin keys (see link::Classes/VSTPluginDesc#-key::).
code::
// search in default paths
VSTPlugin.search(s);
VSTPlugin.plugins(s)['AwesomePlugin'].print;
// for the default server this can be shortend to:
VSTPlugin.search;
VSTPlugin.plugins['AwesomePlugin'].print;
::

METHOD:: pluginList
get all available plugins on a Server.

ARGUMENT:: server
the Server. If code::nil::, the default Server is assumed.

ARGUMENT:: sorted
whether the Array should be sorted alphabetically (by name).

RETURNS:: an Array of link::Classes/VSTPluginDesc:: instances.

METHOD:: pluginKeys
get the keys of all plugins on a given Server.

ARGUMENT:: server
the Server. If code::nil::, the default Server is assumed.

RETURNS:: an Array of plugin keys.

DISCUSSION::
This method only considers the keys stored in the plugin descriptions,
not the additional keys in the plugin dictionary.


METHOD:: print
post all available plugins.

ARGUMENT::
the Server. If code::nil::, the default Server is assumed.

DISCUSSION::
The plugins are posted in alphabetical order in the following format:

code::key (vendor) [path]::

SUBSECTION:: Searching for plugins

METHOD:: search
Scan a local or remote Server for VST plugins and cache the info in the Client.

ARGUMENT:: server
The server to scan for plugins. If the argument is code::nil::, the default Server is used.

ARGUMENT:: dir
An optional Array of directories to search.

ARGUMENT:: useDefault
Whether to search in the default paths, which currently are:
table::
## VST 2.x ||
table::
## Windows || list::
## %ProgramFiles%\VSTPlugins
## %ProgramFiles%\Steinberg\VSTPlugins
## %ProgramFiles%\Common Files\VST2
## %ProgramFiles%\Common Files\Steinberg\VST2
::
## macOS || list::
## ~/Library/Audio/Plug-Ins/VST
## /Library/Audio/Plug-Ins/VST
::
## Linux || list::
## ~/.vst
## /usr/local/lib/vst
## /usr/lib/vst
::
::
## VST 3.x ||
table::
## Windows || list::
## %ProgramFiles%\Common Files\VST3
::
## macOS || list::
## ~/Library/Audio/Plug-Ins/VST3
## /Library/Audio/Plug-Ins/VST3
::
## Linux || list::
## ~/.vst3
## /usr/local/lib/vst3
## /usr/lib/vst3
::
::
::

note::here, emphasis::%ProgramFiles%:: stands for "C:\Program Files" on a 64 bit Server and "C:\Program Files (x86)" on a 32 bit Server.::

ARGUMENT:: verbose
a Boolean telling if the Server should post a message for each VST plugin being found.

The message shows the file path, name and probe result. Probing can fail if the file is
not a VST plugin or if it has the wrong architecture (64 bit vs. 32 bit).

ARGUMENT:: wait
The wait time between OSC messages.

-1 allows an OSC roundtrip between packets.

0 is not safe with UDP, but is probably ok with TCP.

note::This is only relevant for remote Servers (local Servers will send the plugin description via temp files).::

ARGUMENT:: action
an action to be called after the search has finished.

ARGUMENT:: save
whether the search results should be written to the cache file.

ARGUMENT:: parallel
whether plugins should be probed in parallel. This can be significantly faster - at the cost of possible audio dropouts (because all CPU cores might be fully utilized).

NOTE::
Shell plugins like "Waves" are always probed in parallel for performance reasons.
::


DISCUSSION::
Directories are searched recursively. For each valid VST plugin, the information is stored in a dictionary on the Client
and can be retrieved with its key (see link::#Plugin Management::).

If a plugin can't be probed ("... failed!") it either means it's not a valid VST plugin, dependencies are missing or it has the wrong architecture.
note::Generally, you can't use 32 bit plugins on a 64 bit Server and vice verca!::

A new search doesn't automatically clear the dictionary, but existing keys are overwritten.
You can clear the dictionary explicitly with link::#*clear::.

For efficiency, search results are written to a cache file (on the Server's computer) to significantly speed up subsequent searches
(cached plugins don't have to probed again). Many DAWs use a similar strategy. If you want to search directories without updating the cache, set code::save:: to code::false::.

NOTE::
The very first search in a directory usually takes a couple of seconds, but if you have many (heavy) plugins, the process can take significantly longer.
However, subsequent searches will be almost instantaneous (because of the cache file).
::

WARNING::
Shell plugins like "Waves" contain hundreds of (heavy) sub-plugins. On my machine, the very first search takes several minutes(!), so be patient :-)
::

METHOD:: searchMsg

ARGUMENT:: dir
(see above)
ARGUMENT:: useDefault
(see above)
ARGUMENT:: verbose
(see above)
ARGUMENT:: save
(see above)
ARGUMENT:: parallel
(see above)
ARGUMENT:: dest

a) nil: don't write search results (the default)

a) String: name of a temp file where the search results should be written to.

b) link::Classes/Buffer:: or bufnum: the plugin will fill the Buffer
on the Server, the Client can then read the data (each float representing a single byte) and free the Buffer.
The Buffer should be initially empty!

RETURNS:: the message for a emphasis::search:: command (see link::#*search::).

DISCUSSION::

Sending the message to the Server will emphasis::not:: update any info in the Client!
Useful for NRT synthesis.

METHOD:: stopSearch
Stop a running search.

ARGUMENT:: server
the Server. If code::nil::, the default Server is assumed.

METHOD:: stopSearchMsg

RETURNS:: the message for a emphasis::stopSearch:: command (see link::#*stopSearch::).

METHOD:: probe
Probe a single VST plugin.

ARGUMENT:: server
the Server. If code::nil::, the default Server is assumed.

ARGUMENT:: path
the plugin file path.

ARGUMENT:: key
an (optional) additional key under which the plugin description is stored.

ARGUMENT:: wait
the wait time, see link::#*search::.

ARGUMENT:: action
an action to be evaluated after the search has finished.
On success, a link::Classes/VSTPluginDesc:: instances is passed, otherwise the argument is code::nil::.

DISCUSSION::

The given plugin file path is probed on the Server (in a seperate process).
On success, the plugin description is stored under its key, the file path and the (optional) key argument.

This method is used internally by link::Classes/VSTPluginController#-open:: whenever it can't find a key in the plugin dictionary.
It might be occasionally useful for other purposes.


METHOD:: probeMsg

ARGUMENT:: path
the plugin path (see above)
ARGUMENT:: dest

a) nil: don't write probe result (the default)

a) String: name of a temp file where the probe result should be written to.

b) link::Classes/Buffer:: or bufnum: the plugin will fill the Buffer
on the Server, the Client can then read the data (each float representing a single byte) and free the Buffer.
The Buffer should be initially empty!

RETURNS:: the message for a emphasis::probe:: command (see link::#*probe::).

DISCUSSION::

Sending this message to the Server will emphasis::not:: update any info in the Client!

METHOD:: readPlugins

get the descriptions of all locally cached plugins. For this to work, you have to call link::#*search:: at least once (with code::save: true::), then the plugin description will be available without starting a Server.

RETURNS:: an link::Classes/IdentityDictionary:: containing all plugin descriptions as link::Classes/VSTPluginDesc:: instances.

METHOD:: clear
Deletes all cached plugin descriptions for a given Server.

ARGUMENT:: server
the Server. If this is code::nil::, the default Server is assumed.

ARGUMENT:: remove
whether you want to also remove the cache file.

METHOD:: clearMsg

ARGUMENT:: remove
(see above)

RETURNS:: the message for a emphasis::clear:: command (see link::#*clear::).

DISCUSSION::

Sending the message to the Server will emphasis::not:: clear the Client plugin dictionary!


INSTANCEMETHODS::

METHOD:: id
the ID which uniquely identifies the plugin in a SynthDef. It should be a Symbol, a Number or code::nil::.

