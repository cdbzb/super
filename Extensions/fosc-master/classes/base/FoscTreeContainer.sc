/* ------------------------------------------------------------------------------------------------------------
• FoscTreeContainer

a = FoscTreeContainer([FoscTreeNode(), FoscTreeNode()]);
b = FoscTreeContainer([FoscTreeNode(), FoscTreeNode(), a]);
b.do { |node| node.depth.do { Post.tab }; [node.index, node].postln };
------------------------------------------------------------------------------------------------------------ */
FoscTreeContainer : FoscTreeNode {
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    // INIT
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    var <items;
    *new { |items, name|
        ^super.new(name).initFoscTreeContainer(items);
    }
    initFoscTreeContainer { |argItems|
        items = [];
        this.addAll(argItems);
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    // PUBLIC INSTANCE METHODS
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    /* --------------------------------------------------------------------------------------------------------
    • add
    -------------------------------------------------------------------------------------------------------- */
    add { |item|
        items = items.add(item);
        item.prSetParent(this);
    }
    /* --------------------------------------------------------------------------------------------------------
    • addAll
    -------------------------------------------------------------------------------------------------------- */
    addAll { |items|
        items.do { |item| this.add(item) };
    }
    /* --------------------------------------------------------------------------------------------------------
    • do
    -------------------------------------------------------------------------------------------------------- */
    do { |func|
        func.(this);
        items.do { |item| item.do(func) };
    }
    /* --------------------------------------------------------------------------------------------------------
    • insert
    -------------------------------------------------------------------------------------------------------- */
    insert { |index, item|
        items = items.insert(index, item);
        item.prSetParent(this);
    }
    /* --------------------------------------------------------------------------------------------------------
    • leaves
    -------------------------------------------------------------------------------------------------------- */
    leaves {
        var result = [];
        this.do { |node| if (node.isKindOf(FoscTreeContainer).not) { result = result.add(node) } };
        ^result;
    }
    /* --------------------------------------------------------------------------------------------------------
    • nodes
    -------------------------------------------------------------------------------------------------------- */
    nodes {
        var result = [];
        this.do { |item| result = result.add(item) };
        ^result;
    }
    /* --------------------------------------------------------------------------------------------------------
    • put
    -------------------------------------------------------------------------------------------------------- */
    put { |index, item|
        var oldItem;
        oldItem = items[index];
        if (oldItem.notNil) { oldItem.prSetParent(nil) };
        items = items.put(index, item);
    }
    /* --------------------------------------------------------------------------------------------------------
    • remove
    -------------------------------------------------------------------------------------------------------- */
    remove { |item|
        if (items.includes(item).not) {
            ^throw("%:%: item not found: %".format(this.species, thisMethod.name, item));
        };
        item.prSetParent(nil);
        items.remove(item);
    }
}
