/* ------------------------------------------------------------------------------------------------------------
• FoscTypedList

x = FoscTypedList([1, 2, 3, 4], Number);
x.inspect;
------------------------------------------------------------------------------------------------------------ */
FoscTypedList : FoscTypedSequenceableCollection {
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    // INIT
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    init { |items, argItemClass|
        collection = items ?? { [] };
        itemClass = argItemClass;
        collection = collection.collect { |item| this.prItemCoercer(item) }; // coerce type
        collection = collection.asList;
    }
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	// PUBLIC METHODS: LIST MODIFICATION
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	/* --------------------------------------------------------------------------------------------------------
    • ++
	
	Concatenates typed list and expr.

 	Returns new typed list.

    a = FoscTypedList([1, 2, 3, 4], Number);
    b = FoscTypedList([5, 6], Number);
    c = (a ++ b);
    c.items;


    a = FoscTypedList([1, 2, 3, 4], Number);
    b = [5, 6];
    c = (a ++ b);
    c.items;
    -------------------------------------------------------------------------------------------------------- */
    ++ { |expr|
        var items;
        expr = this.species.new(expr, itemClass);
        items = (this.items.copy) ++ expr.items;
        ^this.species.new(items, itemClass);
    }
	/* --------------------------------------------------------------------------------------------------------
    • add

    Appends item to list.

    a = FoscTypedList([1, 2, 3, 4], Number);
    a.add(5);
    a.items;
    -------------------------------------------------------------------------------------------------------- */
    add { |item|
		item = this.prItemCoercer(item);
       	this.prOnInsertion(item);
   		collection.add(item);
    }
    /* --------------------------------------------------------------------------------------------------------
    • addAll
    -------------------------------------------------------------------------------------------------------- */
    addAll { |items|
        items.do { |item| this.add(item) };
    }
    /* --------------------------------------------------------------------------------------------------------
    • insert

    Inserts item at index.

    a = FoscTypedList([1, 2, 3, 4], Number);
    a.insert(1, 5);
    a.items;
    -------------------------------------------------------------------------------------------------------- */
    insert { |index, item|
        item = this.prItemCoercer(item);
       	this.prOnInsertion(item);
   		collection.insert(index, item);
    }
    /* --------------------------------------------------------------------------------------------------------
    • pop

    Puts item at index.

    a = FoscTypedList([1, 2, 3, 4], Number);
    a.pop;
    a.items;
    -------------------------------------------------------------------------------------------------------- */
    /* --------------------------------------------------------------------------------------------------------
    • prepend

    Appends item to list.

    a = FoscTypedList([1, 2, 3, 4], Number);
    a.prepend(5);
    a.items;
    -------------------------------------------------------------------------------------------------------- */
    prepend { |item|
        this.insert(0, item);
    }
    /* --------------------------------------------------------------------------------------------------------
    • put

    Puts item at index.

    a = FoscTypedList([1, 2, 3, 4], Number);
    a[1] = 5;
    a.items;
    -------------------------------------------------------------------------------------------------------- */
    put { |index, item|
    	var oldItem;
        item = this.prItemCoercer(item);
        oldItem = collection[index];
       	this.prOnInsertion(item);
       	this.prOnRemoval(oldItem);
   		collection.put(index, item);
    }
    /* --------------------------------------------------------------------------------------------------------
    • remove

    Remove item.

    a = FoscTypedList([1, 2, 3, 4], Number);
    a.remove(3);
    a.items;
    -------------------------------------------------------------------------------------------------------- */
    /* --------------------------------------------------------------------------------------------------------
    • removeAt

    Remove item at index.

    a = FoscTypedList([1, 2, 3, 4], Number);
    a.removeAt(1);
    a.items;
    -------------------------------------------------------------------------------------------------------- */
    /* --------------------------------------------------------------------------------------------------------
    • sort

    a = FoscTypedList([5, 2, 3, 4], Number);
    a.sort;
    a.items;

    a = FoscTypedList([5, 2, 3, 4], Number);
    a.sort { |a, b| a > b };
    a.items;
    -------------------------------------------------------------------------------------------------------- */
    sort { |func|
		collection.sort(func);
    }
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
    // PUBLIC METHODS: PROPERTIES
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    /* --------------------------------------------------------------------------------------------------------
    • at
    
    Gets item at index.

    Returns item.

    a = FoscTypedList([1, 2, 3, 4], Number);
    a[2];
    -------------------------------------------------------------------------------------------------------- */
    /* --------------------------------------------------------------------------------------------------------
    • atAll
    
    Gets items at indices.

    Returns items.

    a = FoscTypedList([1, 2, 3, 4], Number);
    a[(2..3)];
    -------------------------------------------------------------------------------------------------------- */
    /* --------------------------------------------------------------------------------------------------------
    • includes
    
    Answer true if item exists in collection.

    Returns boolean.

    a = FoscTypedList([1, 2, 3, 4], Number);
    a.includes(3);
    a.includes(5);
    -------------------------------------------------------------------------------------------------------- */
    /* --------------------------------------------------------------------------------------------------------
    • indexOf (abjad: index)
    
    Return the first index matching item.

    Returns nonegative integer.

    a = FoscTypedList([1, 2, 3, 4], Number);
    a.indexOf(3);
    -------------------------------------------------------------------------------------------------------- */
    /* --------------------------------------------------------------------------------------------------------
    • occurrencesOf (abjad: count)
    
    Return the number of occurrences of item in collection.

    Returns nonegative integer.

    a = FoscTypedList([1, 2, 3, 4], Number);
    a.occurrencesOf(3);
    -------------------------------------------------------------------------------------------------------- */
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    // PUBLIC METHODS: TRANSFORMATION
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    /* --------------------------------------------------------------------------------------------------------
    • collect

    x = FoscTypedList([1, 2, 3, 4], Number);
    x = x.collect { |each| each * 2 };
    x.inspect;
    -------------------------------------------------------------------------------------------------------- */
    /* --------------------------------------------------------------------------------------------------------
    • reject

    x = FoscTypedSequenceableCollection([1, 2, 3, 4], Number);
    x = x.reject { |each| each.even };
    x.inspect;
    -------------------------------------------------------------------------------------------------------- */
    /* --------------------------------------------------------------------------------------------------------
    • select

    x = FoscTypedSequenceableCollection([1, 2, 3, 4], Number);
    x = x.select { |each| each.even };
    x.inspect;
    -------------------------------------------------------------------------------------------------------- */
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    // PUBLIC METHODS: DISPLAY
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    /* --------------------------------------------------------------------------------------------------------
    • inspect

    Inspect items in collection.

    a = FoscTypedList([1, 2, 3, 4], Number);
    a.items;
    -------------------------------------------------------------------------------------------------------- */
}
