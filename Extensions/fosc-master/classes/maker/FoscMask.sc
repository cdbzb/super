/* ------------------------------------------------------------------------------------------------------------
• FoscMask


• Example 1

m = FoscMask(#[7,8,9,10], #[-1,2,3,-inf]);
m.mask;
m.sum;


• Example 2 - negative value in 'divisions'

m = FoscMask(#[7,8,9,-10], #[-1,2,3,-inf]);
m.mask;
m.sum;


• Example 3 - 'pattern' repeats cyclically

m = FoscMask(#[7,8,9,10], #[[-1,2,-inf],[-1,1,1,1,-inf]]);
m.mask;
------------------------------------------------------------------------------------------------------------ */
FoscMask {
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    // INIT
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    var divisions, pattern;
    *new { |divisions, pattern|
        ^super.new.init(divisions, pattern);
    }
    init { |argDivisions, argPattern|
        divisions = argDivisions;
        pattern = argPattern;
        if (pattern.rank == 1) { pattern = [pattern] };
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    // PUBLIC INSTANCE PROPERTIES
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    /* --------------------------------------------------------------------------------------------------------
    • asCompileString

    m = FoscMask(#[7,8,9,-10], #[-1,2,3,-inf]);
    m.cs;
    -------------------------------------------------------------------------------------------------------- */
    asCompileString {
        ^"FoscMask(#%, #%)".format(divisions, pattern);
    }
    /* --------------------------------------------------------------------------------------------------------
    • mask
    -------------------------------------------------------------------------------------------------------- */
    mask {
        var result, lpattern, vals;

        result = [];

        divisions.do { |val, i|
            lpattern = pattern.wrapAt(i);

            if (val < 0) {
                result = result.add(val);
            } {
                vals = lpattern.extendToAbsSum(val).asInteger;
                result = result.addAll(vals);
            };
        };

        ^result;
    }
    /* --------------------------------------------------------------------------------------------------------
    • storeArgs
    -------------------------------------------------------------------------------------------------------- */
    storeArgs {
        ^[divisions, pattern];
    }
    /* --------------------------------------------------------------------------------------------------------
    • sum
    -------------------------------------------------------------------------------------------------------- */
    sum {
        ^this.mask.abs.sum;
    }
}
