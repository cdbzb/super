CLASS:: PHSparUse
summary::defines Pbind(s) for using synth values of a HSpar
categories::Libraries>miSCellaneous>HS and HSpar, Streams-Patterns-Events>HS and HSpar
related:: Overviews/miSCellaneous, Guides/Guide_to_HS_and_HSpar, Tutorials/HS_with_VarGui, Classes/HSpar, Classes/PHSpar, Classes/PHSparPlayer, Classes/PHSusePlayer

DESCRIPTION::
Defines Pbind(s) which, when played, can use values of synths derived from link::Classes/HSpar::'s synth definitions. 
Note:: Playing a PHSparUse is just an option for using an already playing help synth of a HSpar, which requires link::Classes/PHSpar:: first. 
See link::Guides/Guide_to_HS_and_HSpar::, "Working Scheme".
::

CLASSMETHODS::

method::new

Creates a new PHSparUse object.

argument::helpSynth
A HSpar object.

argument::pbindArgs
Collection of the form strong::[ dur1, pbindData1, ... , durN, pbindDataN:: strong::]::, whereby
strong::dur:: is a duration value or pattern / stream of durations for the corresponding Pbind(s) and
strong::pbindData:: is a collection of Pbind pairs or a collection of Pbind pair collections, 
defining possibly several Pbinds with same event timing. 

argument::hsIndices
Per default values are taken from the currently switched help synth.
Explicitely given strong::hsIndices:: allow reference to values of other help synths from the corresponding Pbind(s). 
Expects a collection of valid hsIndex values resp. patterns / streams of valid hsIndex values.
A valid hsIndex value is a valid help synth index or a collection of valid help synth indices.


INSTANCEMETHODS::

method::play

A link::Classes/PHSusePlayer:: object is instantiated and started using the TempoClock strong::clock::. 
Quant or SimpleNumber strong::quant:: lets the player step into the quantization as soon as possible, 
with respect to the necessary latency. The PHSusePlayer can be stopped and resumed with options.


EXAMPLES::

code::
(
s = Server.local;
Server.default = s;
s.boot;
)


// HSpar with two synth definitions

(
h = HSpar(s, [ 
    { |freq = 1, dev = 10, center = 80|
        LFDNoise3.kr(freq, dev, center) },
    { |freq = 0.5, dev = 5, center = 60, addFreq = 0.1, addDev = 5|
        LFDNoise3.kr(freq, dev, center) + SinOsc.kr(addFreq, 0, addDev) } 
]);

c = TempoClock(1);
q = 0.12;
)


// Play Pbind (via PHSpar) to poll values from one or both synths, 
// according to the pattern given to hsIndices. 
// Random add with adverb "+.x" adds an interval also to each of two simultaneous synth values.

(
x = PHSpar(h, 
    pbindArgs: [0.12, [\midinote, Pkey(\theseVals).collect(_ +.x [7, 8, [0,7], [-1,8]].choose), 
        \legato, 0.2, \amp, 0.05 ]],
    hsIndices: [ Prand([0,1,\all], inf)] 
).play(c,q);
)


// "stepping in" with second player at (with respect to latency) next possible time on grid

(
y = PHSparUse(h, 
    pbindArgs: [ Prand([0.36, 0.48],inf),  
        [\midinote, Pkey(\theseVals) + [1, 1.75, 2.5, 3.25, 4, 4.75, 5.5, 6.25], 
        \legato, 0.2, \amp, Prand([0.03, 0.05, 0.07], inf) ]],
    hsIndices:  [ Pn(Pshuf([0,0,1,1],1), inf) ]
).play(c,q);
)


// stop x, help synths still playing, producing values for y

x.stop;


// resume x 

x.play(c,q);


// freeing the PHSparPlayer also stops all "related" PHSusePlayers and frees the HSpar

x.free;



/////////////////////////////////////////////////////////////////////////////////

// Instead of using PHSuse / PHSparUse objects in order to have seperate players  
// it's, of course, also possible to define several HS / HSpar objects independently.
// As before players can be synced by quantization.

(
h = HSpar(s, [ 
    { |freq = 0.5, dev = 5, center = 70| 
        LFDNoise3.kr(freq, dev, center) },
    { |freq = 0.2, dev = 5, center = 62, addFreq = 0.1, addDev = 2|
        LFTri.kr(freq, 0, dev, center) + SinOsc.kr(addFreq, 0, addDev) } 
]);
c = TempoClock.new;
q = 0.24;
)


// first player using a HSpar

(
x = PHSpar(h, 
    pbindArgs: [
        Pstutter(Pwhite(5,10), Pseq([0.12, 0.16], inf)),
            [\midinote, Pkey(\thisVal) + Pseq([[2, 5], [1, 6], [0, 7]], inf), \legato, 0.2, \amp, 0.07], 
        0.24, [\midinote, Pkey(\thisVal) + [-6, -1, 3], \legato, 0.2, \amp, 0.07]],
    hsIndices: [0, 1]
).play(c,q);  
)


// define an additional HS 

(
k = HS(s, {|start = 90, end = 50, dur = 10| XLine.kr(start, end, dur); });
)


// start synced player 

(
r = PHS(k, 
    [\start, { rrand(85, 100) }], 
    0.12, [\midinote, Pkey(\val) + [0, 3.5], \legato, 0.2, \amp, 0.07]
);
y = r.play(c,q);  
)


// stop and free (reset) second player and HS  

y.free;


// play again - a new help synth is started

y.play(c,q);


// stop and free first player and HSpar 

x.free;


// stop and free second one and HS 

y.free;


::
