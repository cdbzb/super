CLASS:: PLbeta      
summary:: dynamic scope Pbeta variant
categories::Libraries>miSCellaneous>PLx suite, Streams-Patterns-Events>PLx suite
related:: Overviews/miSCellaneous, Classes/Pbeta, Tutorials/PLx_suite, Tutorials/Event_patterns_and_Functions, Classes/VarGui, Tutorials/VarGui_shortcut_builds 


DESCRIPTION::


Takes Symbol args for later reference by the Streams, which will read from variables in the Environments of their instantiation. See link::Tutorials/PLx_suite::. 


CLASSMETHODS::

method::new

Creates a new PLbeta object.

argument::lo
Symbol or Pbeta lo arg. 
If a Symbol is passed, list can be assigned to an envir variable later on.
Can be dynamically replaced by Patterns or Streams. Defaults to 0.

argument::hi
Symbol or Pbeta hi arg. 
If a Symbol is passed, list can be assigned to an envir variable later on.
Can be dynamically replaced by Patterns or Streams. Defaults to 1.

argument::prob1
Symbol or Pbeta prob1 arg. 
If a Symbol is passed, list can be assigned to an envir variable later on.
Can be dynamically replaced by Patterns or Streams. Defaults to 1.

argument::prob2
Symbol or Pbeta prob2 arg. 
If a Symbol is passed, list can be assigned to an envir variable later on.
Can be dynamically replaced by Patterns or Streams. Defaults to 1.

argument::length
Symbol or Pbeta length arg. 
If a Symbol is passed, list can be assigned to an envir variable later on.
Defaults to inf.

argument::envir
Dictionary or one of the Symbols 
\top, \t (topEnvironment), \current, \c (currentEnvironment).
Dictionary to be taken for variable reference. Defaults to \current.



EXAMPLES::

code::

(
s = Server.local;
Server.default = s;
s.boot;
)


// definition for future reference in arbitrary Environments

(
p = Pbind(
    \midinote, PLbeta(\lo, \hi, \p1, \p2),
    \dur, 0.1
);
)

// prepare current Environment
// prob values for equal distribution

(
~lo = 60;
~hi = 90;
~p1 = 1;
~p2 = 1;
)


// run

x = p.play;


// replace probabilities, get values close to the bounds

(
~p1 = 0.02;
~p2 = 0.02;
)


// change between close-to-bounds and equally-distributed
// PLseq defaults to repeats = inf

(
~p1 =  Pstutter(10, PLseq([0.01, 1]));
~p2 =  Pstutter(10, PLseq([0.01, 1]));
)


// moving bounds

(
~lo = PLseq((60..70));
~hi = PLseq((80..90));
)

x.stop;

::

