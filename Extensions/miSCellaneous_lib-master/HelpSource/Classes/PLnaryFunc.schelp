CLASS:: PLnaryFunc      
summary:: dynamic scope PnaryFunc variant
categories::Libraries>miSCellaneous>PLx suite, Streams-Patterns-Events>PLx suite
related:: Overviews/miSCellaneous, Classes/Pnaryop, Classes/PLnaryop, Tutorials/PLx_suite, Tutorials/Event_patterns_and_Functions, Classes/VarGui, Tutorials/VarGui_shortcut_builds 


DESCRIPTION::


Takes Symbol args for later reference by the Streams, which will read from variables in the Environments of their instantiation. See link::Tutorials/PLx_suite::. For replacing operators dynamically take link::Classes/PLnaryFunc:: with the operator wrapped into a Function.


CLASSMETHODS::

method::new

Creates a new PLnaryFunc object.

argument::func
Symbol or func arg. 
If a Symbol is passed, list can be assigned to an envir variable later on.
Can be dynamically replaced by a Pattern or Stream.

argument::pat
Symbol or pattern arg. 
If a Symbol is passed, list can be assigned to an envir variable later on.
Can be dynamically replaced by Patterns or Streams.

argument::arglist
They are starting with input for the Function's second arg,
as items from pat will be passed to its first. 
If Symbols are passed, arglist args can be assigned to envir variables later on.
Can be dynamically replaced by Patterns or Streams.

argument::envir
Dictionary or one of the Symbols 
\top, \t (topEnvironment), \current, \c (currentEnvironment).
Dictionary to be taken for variable reference. Defaults to \current.



EXAMPLES::

code::

(
s = Server.local;
Server.default = s;
s.boot;
)
		
		
// definition for future reference in arbitrary Environments

(
p = Pbind(
    \midinote, PLnaryFunc(\f, \src, [\dev]),
    \dur, 0.1
);
)


// define Environment and play

(
e = (f: { |x,y| x + y }, src: PLseq([61, 62]), dev: Pbrown(-5, 5, 0.2) );

e.use { x = p.play };
)


// replace Function input Patterns

e.dev = PLseq((0, 0.5..7));

e.src = PLseq([61,64,65]);


// replace Function 

e.f = { |x,y| x - y };

e.f = { |x,y| y * 4 + x };


x.stop;

::

See also link::Tutorials/PLx_suite#Ex. 5b#Ex.5b::.