CLASS:: PLnaryop      
summary:: dynamic scope Pnaryop variant
categories::Libraries>miSCellaneous>PLx suite, Streams-Patterns-Events>PLx suite
related:: Overviews/miSCellaneous, Classes/Pnaryop, Classes/PLnaryFunc, Tutorials/PLx_suite, Tutorials/Event_patterns_and_Functions, Classes/VarGui, Tutorials/VarGui_shortcut_builds 


DESCRIPTION::


Takes Symbol args for later reference by the Streams, which will read from variables in the Environments of their instantiation. See link::Tutorials/PLx_suite::. For replacing operators dynamically take link::Classes/PLnaryFunc:: with the operator wrapped into a Function.


CLASSMETHODS::

method::new

Creates a new PLnaryop object.

argument::operator
Symbol or Pnaryop operator arg. 
If a Symbol is passed, list can be assigned to an envir variable later on.

argument::pat
Symbol or Pnaryop pattern arg. 
If a Symbol is passed, list can be assigned to an envir variable later on.
Can be dynamically replaced by Patterns or Streams.

argument::arglist
Symbols or Pnaryop arglist arg. 
If Symbols are passed, arglist args can be assigned to envir variables later on.
Can be dynamically replaced by Patterns or Streams.

argument::envir
Dictionary or one of the Symbols 
\top, \t (topEnvironment), \current, \c (currentEnvironment).
Dictionary to be taken for variable reference. Defaults to \current.



EXAMPLES::

code::

(
s = Server.local;
Server.default = s;
s.boot;
)
		
		
// definition for future reference in arbitrary Environments

(
p = Pbind(
    \midinote, PLnaryop('+', \src, [\dev]),
    \dur, 0.1
);
)


// define Environment and play

(
e = (src: PLseq([61,62]), dev: Pbrown(-5, 5, 0.2) );

e.use { x = p.play };
)


// replace

e.dev = PLseq((0, 0.5..7));

e.dev = Pbrown(-5, 5, 0.2);

e.src = PLseq([61,64,65]);


x.stop;
::

link::Tutorials/PLx_suite#Ex. 5a#Ex.5a::.