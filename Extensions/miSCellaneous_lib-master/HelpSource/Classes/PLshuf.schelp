CLASS:: PLshuf
summary:: dynamic scope Pshuf variant
categories::Libraries>miSCellaneous>PLx suite, Streams-Patterns-Events>PLx suite
related:: Overviews/miSCellaneous, Classes/Pshuf, Classes/Pshufn, Classes/PLshufn, Classes/PLrand, Classes/PLxrand, Classes/PLwrand, Tutorials/PLx_suite, Tutorials/Event_patterns_and_Functions, Classes/VarGui, Tutorials/VarGui_shortcut_builds


DESCRIPTION::


Takes Symbol args for later reference by the Streams, which will read from variables in the Environments of their instantiation. See link::Tutorials/PLx_suite::. A PLshuf stream keeps a permutation until it ends or there is a list replacement. See link::Classes/PLshufn:: for ongoing choice of new permutations.


CLASSMETHODS::

method::new

Creates a new PLshuf object.

argument::list
Symbol or Pshuf list arg.
If a Symbol is passed, list can be assigned to an envir variable later on.
This lists's elements can be dynamically replaced by Patterns or Streams.

argument::repeats
Symbol or Pshuf repeats arg. If a Symbol is passed, repeats can be assigned to an envir variable later on. Defaults to inf.

argument::cutItems
Symbol or Boolean or Integer (0 or 1) or a Function returning Boolean or Integer.
If a Symbol is passed, cutItems can be assigned to an envir variable later on.
Determines if list items, which are Patterns or Streams themselves,
will be finished if a replacement occurs during their embedding, or if they will be replaced immediately. The latter is the default behaviour (default value true).
For protecting whole lists from immediate replacements see link::Classes/PLn::.

argument::envir
Dictionary or one of the Symbols
\top, \t (topEnvironment), \current, \c (currentEnvironment).
Dictionary to be taken for variable reference. Defaults to \current.



EXAMPLES::

code::

(
s = Server.local;
Server.default = s;
s.boot;
)

(
p = Pbind(
    \midinote, PLshuf(\a),
    \dur, 0.2
);

// prepare Environment

~a = (67..72);
)

x = p.play;


// replace array elements ...

~a[0] = 63;


// ... or whole arrays
// evaluating more than once gives a newly chosen permutation

~a = (60..65);

x.stop;



//////////////////////


// placeholder may also get lists of event patterns

(
p = PLshuf(\a);

~a = [
	Pbind(
        \midinote, Pwhite(60, 65, 3),
        \dur, 0.2
    ),
    Pbind(
        \midinote, Pwhite(80, 85, 3),
        \dur, 0.2
    ),
    Pbind(
        \midinote, Pwhite(80, 85, 6),
        \dur, 0.1
    )
];

x = p.play;
)


// replace array element

(
~a[2] = Pbind(
    \midinote, Pwhite(70, 75, 3) + [0, 5],
    \dur, 0.15
);
)


// replace whole array

(
~a = [
	Pbind(
        \midinote, Pwhite(60, 65, 3) + [0, 5],
        \dur, 0.15
    ),
    Pbind(
        \midinote, Pwhite(70, 80, 2) + [0, 4],
        \dur, 0.25
    ),
    Pbind(
        \midinote, Pwhite(95, 100, 6) + [0, -9],
        \dur, 0.05
    )
];
)

x.stop;

::
 