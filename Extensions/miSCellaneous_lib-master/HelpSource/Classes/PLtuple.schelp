CLASS:: PLtuple
summary:: dynamic scope Ptuple variant
categories::Libraries>miSCellaneous>PLx suite, Streams-Patterns-Events>PLx suite
related:: Overviews/miSCellaneous, Classes/Ptuple, Classes/PLser, Tutorials/PLx_suite, Tutorials/Event_patterns_and_Functions, Classes/VarGui, Tutorials/VarGui_shortcut_builds


DESCRIPTION::


Takes Symbol args for later reference by the Streams, which will read from variables in the Environments of their instantiation. See link::Tutorials/PLx_suite::.


CLASSMETHODS::

method::new

Creates a new PLtuple object.

argument::list
Symbol or Ptuple list arg.
If a Symbol is passed, list can be assigned to an envir variable later on.
This lists's elements can be dynamically replaced by Patterns or Streams.

argument::repeats
Symbol or Ptuple repeats arg. If a Symbol is passed, repeats can be assigned to an envir variable later on. Defaults to inf.

argument::cutItems
Symbol or Boolean or Integer (0 or 1) or a Function returning Boolean or Integer.
If a Symbol is passed, cutItems can be assigned to an envir variable later on.
Determines if list items, which are Patterns or Streams themselves,
will be finished if a replacement occurs during their embedding, or if they will be replaced immediately. The latter is the default behaviour (default value true).
For protecting whole lists from immediate replacements see link::Classes/PLn::.


argument::envir
Dictionary or one of the Symbols
\top, \t (topEnvironment), \current, \c (currentEnvironment).
Dictionary to be taken for variable reference. Defaults to \current.


EXAMPLES::

code::

(
s = Server.local;
Server.default = s;
s.boot;
)

// definition for future reference in arbitrary Environments

p = PLtuple(\a);


// prepare current Environment
// PLtuple defaults to repeats = inf,
// so inner Patterns are repeatedly embedded

~a = [ Pshuf((60..65)), 70, Pshuf((75..80)) ];


// run

x = Pbind(\midinote, p, \dur, 0.2).trace.play;


// replace elements

~a[0] = 72.5;

~a[1] = 74.5;

~a[2] = Prand([85, 86, 87]);


// replace array

// Ptuple and PLtuple start with new embedding of ALL patterns
// if one ends, so here default repeats = inf of PLshuf has no effect:
// new permutation with every loop as Pshuf has repeats = 1

~a = [ Pshuf((60..65)), 70, PLshuf((75..80)) ];


// both Patterns have repeats = inf,
// permutation is kept

~a = [ PLshuf((60..65)), 70, PLshuf((75..80)) ];


x.stop;
::
 