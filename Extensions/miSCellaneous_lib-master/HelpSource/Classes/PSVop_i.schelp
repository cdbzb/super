
CLASS::PSVop_i
summary::Sieve pattern for arbitrary set operations of integer generators with interval output	
categories:: Libraries>miSCellaneous>Sieves and Psieve Patterns, Streams-Patterns-Events>Sieves and Psieve Patterns
related:: Overviews/miSCellaneous, Tutorials/Sieves_and_Psieve_patterns, Classes/Sieve, Classes/Psieve, Classes/PSVunion, Classes/PSVunion_i, Classes/PSVunion_o, Classes/PSVunion_oi, Classes/PSVsect, Classes/PSVsect_i, Classes/PSVsect_o, Classes/PSVsect_oi, Classes/PSVsymdif, Classes/PSVsymdif_i, Classes/PSVsymdif_o, Classes/PSVsymdif_oi, Classes/PSVdif, Classes/PSVdif_i, Classes/PSVdif_o, Classes/PSVdif_oi, Classes/PSVop, Classes/PSVop_o, Classes/PSVop_oi 

DESCRIPTION::
Pattern for arbitrary set operations of integer generators with interval output. For an introduction and more examples see link::Tutorials/Sieves_and_Psieve_patterns::.



CLASSMETHODS::


method::new

Creates a new PSVop_i object.

argument::genList
An array of generators. 
Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce constant intervals.

argument::op
One of the Symbols 'u', 's', 'sd', 'd' as abbreviations for set operations 'union',
'sect', 'symdif', 'dif' or a Pattern/Stream to produce such. Defaults to 'u'.

argument::difIndex
Integer or a Pattern/Stream to produce such. 
Determines the generator from which will be subtracted in case of operation 'dif'.
Defaults to 0.

argument::maxLength
Integer. Maximum number of items, which the stream will return.
Defaults to inf.

argument::limit
Integer. Limit up to which intervals can be returned by the stream.
If no limit is passed, integer intervals might be returned until default summation limit of 65536.


SECTION::Examples

code::
// equivalent

x = PSVop_i([3, 5], \sd)
y = PSVsymdif_i([3, 5])

x.asStream.nextN(15)
y.asStream.nextN(15)


// sequencing of logical operations

p = PSVop_i([3, 3], Pseq([\u, \sd], inf))

p.asStream.nextN(15)


// specify difference

q = PSVop_i([2, 5], \d, 1)

q.asStream.nextN(100)


r = PSVop_i([2, 5], \d, 0)

r.asStream.nextN(100)
::