CLASS::Sieve
summary::Container class for sieve lists
categories:: Libraries>miSCellaneous>Sieves and Psieve Patterns, Streams-Patterns-Events>Sieves and Psieve Patterns
related:: Overviews/miSCellaneous, Tutorials/Sieves_and_Psieve_patterns, Classes/Psieve, Classes/PSVunion, Classes/PSVunion_i, Classes/PSVunion_o, Classes/PSVunion_oi, Classes/PSVsect, Classes/PSVsect_i, Classes/PSVsect_o, Classes/PSVsect_oi, Classes/PSVsymdif, Classes/PSVsymdif_i, Classes/PSVsymdif_o, Classes/PSVsymdif_oi, Classes/PSVdif, Classes/PSVdif_i, Classes/PSVdif_o, Classes/PSVdif_oi, Classes/PSVop, Classes/PSVop_i, Classes/PSVop_o, Classes/PSVop_oi 

DESCRIPTION::
Container for a list of ascending integers as 'points' or 'intervals'. For an introduction and more examples see link::Tutorials/Sieves_and_Psieve_patterns::.


CLASSMETHODS::

method::newEmpty

Creates a new empty Sieve object.


method::new

Creates a new Sieve object in mode 'points'.

argument::gen
A generator. Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce zero and its positive multiples.

argument::limit
An integer limit, which is included when reached. If no limit is passed, returned integers might go up to default limit 65536.


method::new_i

Creates a new Sieve object in mode 'intervals'.

argument::gen
A generator. Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce constant intervals.

argument::limit
If no limit is passed, integer intervals might be collected up to default summation limit of 65536.


method::new_o

Creates a new Sieve object in mode 'points' with offset.

argument::gen
A generator. Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce zero and its positive multiples.

argument::offset
An Integer.

argument::limit
An integer limit, which is included when reached. If no limit is passed, returned integers might go up to default limit 65536.


method::new_oi

Creates a new Sieve object in mode 'intervals' with offset.

argument::gen
A generator. Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce constant intervals.

argument::offset
An Integer.

argument::limit
If no limit is passed, integer intervals might be collected up to default summation limit of 65536.



method::union

Creates a new Sieve object in mode 'points', generated by the union of sets of integers.

argument::... data
Generators and an optional integer limit, wrapped into a Ref, which is included when reached. 
Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce zero and its positive multiples.
If no limit is passed, returned integers might go up to default limit 65536.



method::union_i

Creates a new Sieve object in mode 'intervals', generated by the union of sets of integers.

argument::... data
Generators and an optional integer limit, wrapped into a Ref, which is included when reached. 
Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce constant intervals.
If no limit is passed, integer intervals might be collected up to default summation limit of 65536.


method::union_o

Creates a new Sieve object in mode 'points' with offsets, generated by the union of sets of integers.

argument::... data
Alternating generators and integer offsets plus an optional integer limit, wrapped into a Ref, which is included when reached. 
Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce zero and its positive multiples.
If no limit is passed, returned integers might go up to default limit 65536.


method::union_oi

Creates a new Sieve object in mode 'intervals' with offsets, generated by the union of sets of integers.

argument::... data
Alternating generators and integer offsets plus an optional integer limit, wrapped into a Ref, which is included when reached. 
Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce constant intervals.
If no limit is passed, integer intervals might be collected up to default summation limit of 65536.


method::sect

Creates a new Sieve object in mode 'points', generated by the intersection of sets of integers.

argument::... data
Generators and an optional integer limit, wrapped into a Ref, which is included when reached. 
Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce zero and its positive multiples.
If no limit is passed, returned integers might go up to default limit 65536.


method::sect_i

Creates a new Sieve object in mode 'intervals', generated by the intersection of sets of integers.

argument::... data
Generators and an optional integer limit, wrapped into a Ref, which is included when reached. 
Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce constant intervals.
If no limit is passed, integer intervals might be collected up to default summation limit of 65536.


method::sect_o

Creates a new Sieve object in mode 'points' with offsets, generated by the intersection of sets of integers.

argument::... data
Alternating generators and integer offsets plus an optional integer limit, wrapped into a Ref, which is included when reached. 
Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce zero and its positive multiples.
If no limit is passed, returned integers might go up to default limit 65536.


method::sect_oi

Creates a new Sieve object in mode 'intervals' with offsets, generated by the intersection of sets of integers.

argument::... data
Alternating generators and integer offsets plus an optional integer limit, wrapped into a Ref, which is included when reached. 
Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce constant intervals.
If no limit is passed, integer intervals might be collected up to default summation limit of 65536.


method::symdif

Creates a new Sieve object in mode 'points', generated by the symmetrical difference of sets of integers.

argument::... data
Generators and an optional integer limit, wrapped into a Ref, which is included when reached. 
Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce zero and its positive multiples.
If no limit is passed, returned integers might go up to default limit 65536.


method::symdif_i

Creates a new Sieve object in mode 'intervals', generated by the symmetrical difference of sets of integers.

argument::... data
Generators and an optional integer limit, wrapped into a Ref, which is included when reached. 
Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce constant intervals.
If no limit is passed, integer intervals might be collected up to default summation limit of 65536.


method::symdif_o

Creates a new Sieve object in mode 'points' with offsets, generated by the symmetrical difference of sets integers.

argument::... data
Alternating generators and integer offsets plus an optional integer limit, wrapped into a Ref, which is included when reached. 
Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce zero and its positive multiples.
If no limit is passed, returned integers might go up to default limit 65536.


method::symdif_oi

Creates a new Sieve object in mode 'intervals' with offsets, generated by the symmetrical difference of sets of integers.

argument::... data
Alternating generators and integer offsets plus an optional integer limit, wrapped into a Ref, which is included when reached. 
Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce constant intervals.
If no limit is passed, integer intervals might be collected up to default summation limit of 65536.


method::dif

Creates a new Sieve object in mode 'points', generated by the difference of sets of integers.

argument::... data
Generators and an optional integer limit, wrapped into a Ref, which is included when reached. 
Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce zero and its positive multiples.
If no limit is passed, returned integers might go up to default limit 65536.


method::dif_i

Creates a new Sieve object in mode 'intervals', generated by the difference of sets of integers.

argument::... data
Generators and an optional integer limit, wrapped into a Ref, which is included when reached. 
Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce constant intervals.
If no limit is passed, integer intervals might be collected up to default summation limit of 65536.


method::dif_o

Creates a new Sieve object in mode 'points' with offsets, generated by the difference of sets of integers.

argument::... data
Alternating generators and integer offsets plus an optional integer limit, wrapped into a Ref, which is included when reached. 
Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce zero and its positive multiples.
If no limit is passed, returned integers might go up to default limit 65536.


method::dif_oi

Creates a new Sieve object in mode 'intervals' with offsets, generated by the difference of sets of integers.

argument::... data
Alternating generators and integer offsets plus an optional integer limit, wrapped into a Ref, which is included when reached. 
Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce constant intervals.
If no limit is passed, integer intervals might be collected up to default summation limit of 65536.

method::limit

Get the global limit of Class Sieve.
Set the global limit of Class Sieve to an integer value.



INSTANCEMETHODS::

method::union

Creates a new Sieve object in mode 'points', generated by the union of the receiver and sets of integers.

argument::... data
Generators and an optional integer limit, wrapped into a Ref, which is included when reached. 
Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce zero and its positive multiples.
If no limit is passed, returned integers might go up to default limit 65536.


method::|

Binary operator for instance method strong::union::. Creates a new Sieve object in mode 'points', generated by the union of the receiver and a generator.

argument::gen
A generator. Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce zero and its positive multiples.
Returned integers might go up to default limit 65536.


method::union_i

Creates a new Sieve object in mode 'intervals', generated by the union of the receiver and sets of integers.

argument::... data
Generators and an optional integer limit, wrapped into a Ref, which is included when reached. 
Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce constant intervals.
If no limit is passed, integer intervals might be collected up to default summation limit of 65536.


method::|*

Binary operator for instance method strong::union_i::. Creates a new Sieve object in mode 'intervals', generated by the union of the receiver and a generator.

argument::gen
A generator. Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce zero and its positive multiples.
Integer intervals might be collected up to default summation limit of 65536.



method::union_o

Creates a new Sieve object in mode 'points' with offsets, generated by the union of the receiver and sets of integers.

argument::... data
Alternating integer offsets and generators plus an optional integer limit, wrapped into a Ref, which is included when reached. 
Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce zero and its positive multiples.
If no limit is passed, returned integers might go up to default limit 65536.



method::union_oi

Creates a new Sieve object in mode 'intervals' with offsets, generated by the union of the receiver and sets of integers.

argument::... data
Alternating integer offsets and generators plus an optional integer limit, wrapped into a Ref, which is included when reached. 
Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce constant intervals.
If no limit is passed, integer intervals might be collected up to default summation limit of 65536.


method::sect

Creates a new Sieve object in mode 'points', generated by the intersection of the receiver and sets of integers.

argument::... data
Generators and an optional integer limit, wrapped into a Ref, which is included when reached. 
Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce zero and its positive multiples.
If no limit is passed, returned integers might go up to default limit 65536.


method::&

Binary operator for instance method strong::sect::. Creates a new Sieve object in mode 'points', generated by the intersection of the receiver and a generator.

argument::gen
A generator. Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce zero and its positive multiples.
Returned integers might go up to default limit 65536.



method::sect_i

Creates a new Sieve object in mode 'intervals', generated by the intersection of the receiver and sets of integers.


argument::... data
Generators and an optional integer limit, wrapped into a Ref, which is included when reached. 
Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce constant intervals.
If no limit is passed, integer intervals might be collected up to default summation limit of 65536.



method::&*

Binary operator for instance method strong::sect_i::. Creates a new Sieve object in mode 'intervals', generated by the intersection of the receiver and a generator.

argument::gen
A generator. Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce zero and its positive multiples.
Integer intervals might be collected up to default summation limit of 65536.


method::sect_o

Creates a new Sieve object in mode 'points' with offsets, generated by the intersection of the receiver and sets of integers.

argument::... data
Alternating integer offsets and generators plus an optional integer limit, wrapped into a Ref, which is included when reached. 
Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce zero and its positive multiples.
If no limit is passed, returned integers might go up to default limit 65536.


method::sect_oi

Creates a new Sieve object in mode 'intervals' with offsets, generated by the intersection of the receiver and sets of integers.

argument::... data
Alternating integer offsets and generators plus an optional integer limit, wrapped into a Ref, which is included when reached. 
Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce constant intervals.
If no limit is passed, integer intervals might be collected up to default summation limit of 65536.


method::symdif

Creates a new Sieve object in mode 'points', generated by the symmetrical difference of the receiver and sets of integers.

argument::... data
Generators and an optional integer limit, wrapped into a Ref, which is included when reached. 
Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce zero and its positive multiples.
If no limit is passed, returned integers might go up to default limit 65536.


method::--

Binary operator for instance method strong::symdif::. Creates a new Sieve object in mode 'points', generated by the symmetric difference of the receiver and a generator.

argument::gen
A generator. Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce zero and its positive multiples.
Returned integers might go up to default limit 65536.


method::symdif_i

Creates a new Sieve object in mode 'intervals', generated by the symmetrical difference of the receiver and sets of integers.

argument::... data
Generators and an optional integer limit, wrapped into a Ref, which is included when reached. 
Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce constant intervals.
If no limit is passed, integer intervals might be collected up to default summation limit of 65536.


method::--*

Binary operator for instance method strong:: symdif_i::. Creates a new Sieve object in mode 'intervals', generated by the symmetric difference of the receiver and a generator.

argument::gen
A generator. Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce zero and its positive multiples.
Integer intervals might be collected up to default summation limit of 65536.


method::symdif_o

Creates a new Sieve object in mode 'points' with offsets, generated by the symmetrical difference of the receiver and sets of integers.

argument::... data
Alternating integer offsets and generators plus an optional integer limit, wrapped into a Ref, which is included when reached. 
Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce constant intervals.
If no limit is passed, returned integers might go up to default limit 65536.


method::symdif_oi

Creates a new Sieve object in mode 'intervals' with offsets, generated by the symmetrical difference of the receiver and sets of integers.

argument::... data
Alternating integer offsets and generators plus an optional integer limit, wrapped into a Ref, which is included when reached. 
Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce constant intervals.
If no limit is passed, integer intervals are collected up to default summation limit of 65536.



method::dif

Creates a new Sieve object in mode 'points', generated by the difference of the receiver and sets of integers.

argument::... data
Generators and an optional integer limit, wrapped into a Ref, which is included when reached. 
Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce zero and its positive multiples.
If no limit is passed, returned integers might go up to default limit 65536.

method::-

Binary operator for instance method strong::dif::. Creates a new Sieve object in mode 'points', generated by the difference of the receiver and a generator.

argument::gen
A generator. Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce zero and its positive multiples.
Returned integers might go up to default limit 65536.



method::dif_i

Creates a new Sieve object in mode 'intervals', generated by the difference of the receiver and sets of integers.

argument::... data
Generators and an optional integer limit, wrapped into a Ref, which is included when reached. 
Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce constant intervals.
If no limit is passed, integer intervals might be collected up to default summation limit of 65536.

method::-*

Binary operator for instance method strong:: dif_i::. Creates a new Sieve object in mode 'intervals', generated by the difference of the receiver and a generator.

argument::gen
A generator. Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce zero and its positive multiples.
Integer intervals might be collected up to default summation limit of 65536.


method::dif_o

Creates a new Sieve object in mode 'points' with offsets, generated by the difference of the receiver and sets of integers.

argument::... data
Alternating integer offsets and generators plus an optional integer limit, wrapped into a Ref, which is included when reached. 
Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce zero and its positive multiples.
If no limit is passed, returned integers might go up to default limit 65536.

method::dif_oi

Creates a new Sieve object in mode 'intervals' with offsets, generated by the difference of the receiver and sets of integers.

argument::... data
Alternating integer offsets and generators plus an optional integer limit, wrapped into a Ref, which is included when reached. 
Allowed generators: Integers, Streams or Patterns producing intervals or Sieves itself.
Integers and Stream/Pattern output must be strictly positive. 
Integers as generators produce constant intervals.
If no limit is passed, integer intervals might be collected up to default summation limit of 65536.



method::plot

Plot the Sieve's list.

	

method::size

The Sieve's list size.


method::toPoints

Convert the Sieve to mode 'points' and set first point to offset.


method::toIntervals

Convert the Sieve to mode 'intervals' and set offset to first point.


method::shift

Shift the Sieve's list by strong::addOffset::.

argument::addOffset
An Integer.


method::>>

Binary operator for instance method strong::shift::. Shift the Sieve's list by strong::addOffset::.

argument::addOffset
An Integer.


method::shiftTo

Shift the Sieve's list to strong::targetOffset::.

argument::targetOffset
An Integer.


method::>>!

Binary operator for instance method strong::shiftTo::. Shift the Sieve's list to strong::targetOffset::.

argument::targetOffset
An Integer.


method::shiftToZero

Shift the Sieve's list to offset zero.


method::weakCopy

Returns a new Sieve with same list object.


method::copy

Returns a new Sieve with copied list object.


method::copyWith

Takes over mode and offset from receiver and passes an appropriate SequenceableCollection.

argument::seqCollection
SequenceableCollection.

argument::withCheck
Boolean. Determines if strong::seqCollection:: is checked according to mode.
Defaults to true.


method::copyApplyTo

Apply operator (Symbol of method or Function) to the Sieve's list and pass the result to a new Sieve with copied mode and offset.

argument::operator
Symbol of method or Function.

argument::withCheck
Boolean. Determines if result of the operation is checked according to mode.
Defaults to true.


method::==

Equality check. Sieves of different mode are equal iff the lists resulting from conversion are equal.

argument::that
Object to compare.


method::segmentGreaterEqual

Returns a new Sieve of mode 'points' with Integers greater than or equal strong::lo::. 

argument::lo
Integer.


method::>=!

Binary operator for strong::segmentGreaterEqual::. 

argument::lo
Integer.



method::segmentGreater

Returns a new Sieve of mode 'points' with Integers greater than strong::lo::. 

argument::lo
Integer.


method::>!

Binary operator for strong::segmentGreater::. 

argument::lo
Integer.


method::segmentLessEqual

Returns a new Sieve of mode 'points' with Integers less than or equal strong::hi::. 

argument::hi
Integer.


method::<=!

Binary operator for strong::segmentLessEqual::. 

argument::hi
Integer.


method::segmentLess

Returns a new Sieve of mode 'points' with Integers less than strong::hi::. 

argument::hi
Integer.


method::<!

Binary operator for strong::segmentLess::. 

argument::hi
Integer.



method::segmentBetweenEqual

Returns a new Sieve of mode 'points' with Integers greater than or equal strong::lo:: and less than or equal strong::hi::. 
This method is more efficient than applying strong::segmentGreaterEqual:: plus strong::segmentLessEqual::.

argument::lo
Integer.

argument::hi
Integer.


method::<>=!

Binary operator for strong::segmentBetweenEqual::.

argument::bounds
Must be an array with integers lo and hi.



method::segmentBetween

Returns a new Sieve of mode 'points' with Integers greater than strong::lo:: and less than strong::hi::. 
This method is more efficient than applying strong::segmentGreater:: plus strong::segmentLess::.

argument::lo
Integer.

argument::hi
Integer.



method::<>!

Binary operator for strong::segmentBetween::.

argument::bounds
Must be an array with integers lo and hi.



method::checkSymmetricPeriods

Checks the list of a Sieve for symmetric periods and returns an array strong::[periods, symmetries, completions]::,
where periods is the clumped list of strong::periods::, strong::symmetries:: a corresponding array of Symbols and
strong::completions:: a corresponding array of Booleans, indicating if periods are complete.
strong::periods:: can contains Symbols strong::'sym'::, strong::'asym'::, strong::'quasisym':: and strong::'identic'::. 
See link::Tutorials/Sieves_and_Psieve_patterns#3b:: for a characterisation of these types.
It is assumed that the receiver has a periodic list, changes between periodic and
aperiodic segments are not detected, so also aperiodic prefixes of periodic lists.


method::checkCharacteristicPeriod

Checks the first complete period based on the data returned by strong::checkSymmetricPeriods::.
It returns an array strong::[characteristicPeriod, offset, oddEven, symmetry]::, where
strong::characteristicPeriod:: denotes the first complete period, strong::offset:: the index at which it starts
in the receiver's list, strong::oddEven:: one of the Symbols 'odd' and 'even' and strong::symmetry:: the 
symmetry type as in strong::checkSymmetricPeriods::.


method::plotCharacteristicPeriod

Plots the characteristic period returned by strong::checkCharacteristicPeriod::.


method::list

Get the Sieve's list.


method::offset

Get the Sieve's offset.


method:: mode

Get the Sieve's mode.



private:: miSC_setMode, miSC_setOffset, miSC_setList, miSC_sieveOp, miSC_checkOffsetArgs, miSC_checkArgs, miSC_streamifySieveItems



SECTION::Examples

code::
// instantiation with 'new'

Sieve.new(1000)

Sieve.new(4, 20)

Sieve.new_i(4, 20)

Sieve.new_o(4, 1, 20)

Sieve.new_oi(4, 1, 20)



// instantiation with union
// collecting multiples resp. shifted multiples
// limit must be wrapped into a Ref object

Sieve.union(4, 7, `20)

Sieve.union_i(4, 7, `20)

Sieve.union_o(4, 1, 7, -1, `20)

Sieve.union_oi(4, 1, 7, -1, `20)



// instantiation with intersection
// collecting least common multiples (lcms) resp. shifted lcms

Sieve.sect(4, 3, `30)

Sieve.sect_i(4, 3, `30)

Sieve.sect_o(4, -1, 3, 0, `30)

Sieve.sect_oi(4, -1, 3, 0, `30)



// instantiation with symmetrical difference
// equals union without intersection, thus multiples without lcms

Sieve.symdif(4, 3, `30)

Sieve.symdif_i(4, 3, `30)

Sieve.symdif_o(4, -1, 3, 0, `30)

Sieve.symdif_oi(4, -1, 3, 0, `30)


// all take more arguments

Sieve.union(4, 5, 7, `30)

Sieve.symdif(4, 5, 7, `30)



// difference is not symmetrical, but subtrahends can be swapped

Sieve.dif(4, 3, 7, `30)

Sieve.dif(3, 4, 7, `30)

Sieve.dif(3, 7, 4, `30)



// corresponding instance methods and its binary operators

a = Sieve(4, 30);

b = Sieve(3, 30);

a.union(b)

a|b

a.union_i(b)

a|*b


// here first arg is offset of receiver

a.union_o(0, b, 100)

a.union_oi(0, b, 100)


a.sect(8)

a & 8

a.sect_i(8)

a &* 8


a.sect_o(1, b, 5)

a.sect_oi(1, b, 5)


a.symdif(b)

a -- b

a.symdif_i(b)

a --* b


a.dif(b)

a - b

a.dif_i(b)

a -* b

::

For conversion, segmentation and transformation examples see link::Tutorials/Sieves_and_Psieve_patterns::.




