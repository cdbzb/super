snippet fork
\{$1\}.fork;
endsnippet

snippet mega
MegaBind(
		[
			[$1]
		],
		${2:durs},
		[$3],
		{|i|
			$4
		},
		{|i|
			$5
		}
	)$5
endsnippet

snippet freqseq
$1.ar( i.freqSeq$2 )
endsnippet

snippet gateseq
Env.asr($1).kr(gate:i.gateSeq)
endsnippet

snippet do
$1.do{|$2| $3};
endsnippet

snippet fold
//	$2	{{{$1
endsnippet

snippet env
Env.$1($2).kr(2,${3:gate:})
endsnippet

snippet envelope
Env.$1($2).kr(2,gate:$3)
endsnippet

snippet filter
$1[$2]=\filter->{|in| $3}
endsnippet

snippet pfx
SynthDef($1,\{|out wet=1 $3|
	var in=In.ar(out);
	var sig = $2;
	XOut.ar(out, wet, sig)\}
).add;
endsnippet

snippet still
P.still( $2, start: $3, timecode:$1, music: { |p b e|
	e.still.value(
		wait: $4,
	);
});
endsnippet

snippet func "wrap curried function"
{ |i| ${VISUAL:/_/i/} } 
endsnippet

snippet freq "wrap in freq"
freq: ${VISUAL},
$1
endsnippet

snippet wrapp
[
	${VISUAL}
].pp
endsnippet

snippet part
P(\\$1,start:$2,music:{|p b e| 
	$3
});
endsnippet

snippet event
(
	$1
).play
endsnippet

snippet tune "tune part"
P.tune($1);
endsnippet

snippet pp
[
	$1
].pp;
endsnippet

snippet play
{
	${VISUAL}
}.play
endsnippet

snippet df  "me freq" i
[$1].df('$2'${3:,octave: $4})${5:.q}
endsnippet

snippet dm  "mid degrees" i
[$1].dm('$2'${3:,octave: $4})${5:.q}
endsnippet

snippet function "function" i
{${1: |$2|} $3 }$4
endsnippet

snippet pbind "vertical pbind" i
[
	$1
].p
endsnippet

snippet parse "parse rhythms" i
Song.parse($1,[$2]${3:,$4})${5:.q}
endsnippet

snippet eugen "Ugen" i
$1.${2:a}r
endsnippet

snippet fxdur "temporary " i
.dur(Song.secDur[$1])
endsnippet


snippet out
${1:=> }Out.ar(${2:0},${3:_})
endsnippet

snippet detect
${1:=> }DetectSilenceDry.ar(_,doneAction:${2:2})
endsnippet

snippet alewife "addLine" i
["${VISUAL}","r"].addLine;
endsnippet

snippet pdef
Pdef($1,${VISUAL:/.play;//});
endsnippet

snippet pb
(
	[
	$1
	].p
	.play
)
endsnippet

snippet foldd
//{{{${VISUAL}//}}}
endsnippet
