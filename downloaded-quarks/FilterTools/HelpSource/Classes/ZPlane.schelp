TITLE:: ZPlane
summary:: a Z-plane object for SC with graphical interface
categories:: DSP
related:: Classes/FilterCoef

DESCRIPTION::
A class for graphing poles and zeros on the Z-plane. Filters of arbitrary order can be designed by specifying the location of the desired poles and zeros on the Z-plane and feeding these polar coordinates to link::Classes/FilterCoef::. CODE::ZPlane:: can also calculate the frequency and phase response of the desired filter. A number of convenience methods are also implemented for easier use, like automatic detection of identical pole/zero pairs and autmatic conjugate adding when specifying a pole/zero (thus resulting in real-valued filter coefficients).


CLASSMETHODS::

METHOD:: new
Create a new instance of CODE::ZPlane::.

ARGUMENT:: poles
An link::Classes/Array:: containing a number of poles of type link::Classes/Polar::.

ARGUMENT:: zeros
An link::Classes/Array:: containing a number of poles of type link::Classes/Polar::.

ARGUMENT:: function
A link::Classes/Function:: evaluated each time the mouse is moved in the gui. Can be used to update specific settings when a pole or zero is dragged to another location on the Z-plane.

ARGUMENT:: real
A link::Classes/Boolean:: indicating whether the filter should be real or complex. When set to CODE::true::, the conjugates of any specified poles and zeros are added automatically.

returns:: A new instance of CODE::ZPlane::.

DISCUSSION:
CODE::
a = ZPlane([Polar(0.8, 0.25)], [Polar(-0.8, 0.25)]);
a.poles;
a.zeros;

a.gui;
::
image::zplane.png#Z-plane::


INSTANCEMETHODS::

PRIVATE:: angle
PRIVATE:: dist
PRIVATE:: freqResp
PRIVATE:: function
PRIVATE:: phaseResp
PRIVATE:: poles
PRIVATE:: real
PRIVATE:: updNumPolesAndZeros
PRIVATE:: zeros

METHOD:: addPole
Add a pole to the Z-plane. Index must be a valid link::Classes/Integer:: index into the poles array. Alternatively, index can be specified as CODE::nil::, which means the pole will be added to the tail of the poles array. Poles can also be added by calling link::#-gui:: on an instance of CODE::ZPlane::, clicking somewhere inside the graphical representation of the Z-plane and pressing EMPHASIS::'ctr-p'::.

ARGUMENT:: index
An instance of link::Classes/Integer:: or CODE::nil::.

ARGUMENT:: loc
An instance of link::Classes/Polar::.

METHOD:: addZero
Add a zero to the Z-plane. Index must be a valid link::Classes/Integer:: index into the zeros array. Alternatively, index can be specified as CODE::nil::, which means the zero will be added to the tail of the zeros array. Zeros can also be added by calling link::#-gui:: on an instance of CODE::ZPlane::, clicking somewhere inside the graphical representation of the Z-plane and pressing EMPHASIS::'ctr-z'::.

ARGUMENT:: index
An instance of link::Classes/Integer:: or CODE::nil::.

ARGUMENT:: loc
An instance of link::Classes/Polar::.

METHOD:: removePole
Removes the pole specified by index. If there is a conjugate, this is removed too.

ARGUMENT:: index
An instance of link::Classes/Integer::.

returns:: The (possibly modified) index in response to a method call.

METHOD:: removeZero
Removes the zero specified by index. If there is a conjugate, this is removed too.

ARGUMENT:: index
An instance of link::Classes/Integer::.

returns:: The (possibly modified) index in response to a method call.

METHOD:: setPole
Change the location of a particular pole specified by index. If there is a conjugate this will be moved too.

ARGUMENT:: index
An instance of link::Classes/Integer:: or CODE::nil::.

ARGUMENT:: newLoc
An instance of link::Classes/Polar::.

METHOD:: setPole
Change the location of a particular pole specified by index. If there is a conjugate this will be moved too.

ARGUMENT:: index
An instance of link::Classes/Integer:: or CODE::nil::.

ARGUMENT:: newLoc
An instance of link::Classes/Polar::.

METHOD:: setZero
Change the location of a particular zero specified by index. If there is a conjugate this will be moved too.

ARGUMENT:: index
An instance of link::Classes/Integer:: or CODE::nil::.

ARGUMENT:: newLoc
An instance of link::Classes/Polar::.

METHOD:: removeAllPoles
Removes all poles associated with this instance of CODE::ZPlane::.

NOTE:: poles might be added at math::\left(0,0\right):: however, to keep the nr. of poles and zeros equal.::

METHOD:: removeAllZeros
Removes all zeros associated with this instance of CODE::ZPlane::.

NOTE:: zeros might be added at math::\left(0,0\right):: however, to keep the nr. of poles and zeros equal.::

METHOD:: calcAmpResp
Calculate the amplitude response of the filter.

ARGUMENT:: res
An link::Classes/Integer:: denoting the resolution of the amplitude response.

ARGUMENT:: norm
A link::Classes/Boolean:: indicating whether the peak value of the amplitude response should be normalized to unity.

RETURNS:: An link::Classes/Array:: holding the amplitude response of size CODE::res::.

METHOD:: calcPhaseResp
Calculate the amplitude response of the filter.

ARGUMENT:: res
An link::Classes/Integer:: denoting the resolution of the phase response.

ARGUMENT:: unwrap
A link::Classes/Boolean:: indicating whether the phase response should be unwrapped.

ARGUMENT:: derivative
A link::Classes/Boolean:: indicating whether the negative derivative of the phase response (group delay) should be calculated too.

RETURNS:: An link::Classes/Array:: (of arrays) holding the phase response and possibly the group delay of size CODE::res::.

METHOD:: calcAmpAndPhaseResp
Calculate the amplitude and phase response of the filter.

NOTE:: If one requires the amplitude response and the phase response of the filter simultaneously, this method is slightly more efficient than calling link::#-calcAmpResp:: and link::#-calcPhaseResp:: separately.::

ARGUMENT:: res
An link::Classes/Integer:: denoting the resolution of the frequency response.

ARGUMENT:: norm
A link::Classes/Boolean:: indicating whether the peak value of the amplitude response should be normalized to unity.

ARGUMENT:: unwrap
A link::Classes/Boolean:: indicating whether the phase response should be unwrapped.

ARGUMENT:: derivative
A link::Classes/Boolean:: indicating whether the negative derivative of the phase response (group delay) should be calculated too.

RETURNS:: An link::Classes/Array:: of arrays holding the amplitude and phase response and possibly the group delay, all of size CODE::res::.

METHOD:: gui
Make a window with a graphical interface for an instance of CODE::ZPlane::.

ARGUMENT:: bounds
A link::Classes/Rect:: indicating the bounds of the window holding the graphical interface.

METHOD:: close
Close the gui associated with a particular instance of CODE::ZPlane::.


EXAMPLES::

code::
// Creating a new instance of ZPlane.
(
// Create a new instance of ZPlane with a pole at 0.25, 0.25pi and a zero at 0.25, 0.75pi.
a = ZPlane.new([Polar.new(0.25, 0.25pi)], [Polar.new(0.25, 0.75pi)]);
// Notice that ZPlane automatically accounts for the complex conjugates.
a.poles.postln;
a.zeros.postln;

// Add a second pole at 0.75, 0.0pi
a.addPole(nil, Polar.new(0.75, 0.0pi));
// Notice that ZPlane automatically added a zero at 0.0, 0.0pi to keep the nr. of poles and zeros
// equal.
a.poles.postln;
a.zeros.postln;
)


// Controlling things graphically. Try to move poles and zeros around or to create new poles and  
// zeros by clicking inside the view and pressing ctrl- p or ctrl- z respectively. Delete poles or  
// zeros by clicking on an item and pressing ctrl- d.
(
// Create a new instance of ZPlane with a pole at 0.25, 0.25pi and a zero at 0.25, 0.75pi.
a = ZPlane.new([Polar.new(0.25, 0.25pi)], [Polar.new(0.25, 0.75pi)], { |me| [me.poles, me.zeros].postln });

a.gui;
)


// Plotting the amplitude and phase response of a filter
(
// Create a new instance of ZPlane with a pole at 0.8, 0.25pi and a zero at 1.0/0.8, 0.25pi. An 
// example of an allpass filter.
a = ZPlane.new([Polar.new(0.8, 0.25pi)], [Polar.new(0.8.reciprocal, 0.25pi)]);

b = a.calcAmpAndPhaseResp;
b[0].plot("Amplitude Response", Rect(50, 300, 400, 200), minval: 0.0, maxval: 1.2);
b[1].plot("Phase Response", Rect(460, 300, 400, 200));
b[2].plot("Group Delay", Rect(870, 300, 400, 200));
)


// Using ZPlane together with FilterCoef to generate filter coefficients.
(
// Create a new instance of ZPlane with a zero at 0.8, 0.75pi. A lowpass filter.
a = ZPlane.new(zeros: [Polar.new(0.8, 0.75pi)]);
b = a.calcAmpAndPhaseResp;
b[0].plot("Amplitude Response", Rect(50, 300, 400, 200));
b[1].plot("Phase Response", Rect(460, 300, 400, 200));
b[2].plot("Group Delay", Rect(870, 300, 400, 200));

// Calculate the (normalized) time domain filter coefficients
FilterCoef.calc(a.poles, a.zeros);
)


// Sound examples:
Server.default = Server.internal;
s = Server.default;
s.boot;

// Using ZPlane together with FilterCoef and LTI.
(
// Make a new instance of ZPlane with 7 poles evenly distributed from 0 to pi
a = ZPlane.new([Polar.new(0.997, 0.0pi), Polar.new(0.997, (1/6)*pi), Polar.new(0.997, (1/3)*pi), Polar.new(0.997, (1/2)*pi), Polar.new(0.997, (2/3)*pi), Polar.new(0.997, (5/6)*pi), Polar.new(0.997, pi)]);

a.gui; // Watch the Z-plane graph
b = a.calcAmpAndPhaseResp; // Calculate amplitude and phase response
b[0].plot("Amplitude Response", Rect(50, 90, 400, 200));
b[1].plot("Phase Response", Rect(460, 90, 400, 200));
b[2].plot("Group Delay", Rect(870, 90, 400, 200));
)

(
// Calculate time-domain coefficients and fill the buffers needed by LTI.
c = FilterCoef.calc(a.poles, a.zeros);
d = Buffer.sendCollection(s, c[0].real, 1);
e = Buffer.sendCollection(s, c[1][1..c[1].lastIndex].real, 1);
)

SCFreqScopeWindow.new(400, 200, 0);

x = { LTI.ar(WhiteNoise.ar(0.4).dup(2), e.bufnum, d.bufnum) }.play;
x.free


// CAUTION: The following example is a bit dangerous, since we are updating the coefficients in 
// real-time. As long as we keep the poles inside the unit circle and don't add or delete any poles 
// or zeros we should be fine.
(
var func;

Server.internal.boot.scope;
func = { |me| var coef = FilterCoef.calc(me.poles, me.zeros);
x.set(\a0, coef[0][0].real, \a1, coef[0][1].real, \a2, coef[0][2].real, \b1, coef[1][1].real, \b2, coef[1][2].real)
};
a = ZPlane.new([Polar.new(0.25, 0.25pi)], [Polar.new(0.5, 0.75pi)], func);
a.gui;

x = { arg a0 = 0.36224217105666, a1 = 0.2561438955859, a2 = 0.090560542764165, 
b1 = 0.35355339059327, b2 = -0.0625; 
SOS.ar(WhiteNoise.ar(0.4).dup, a0, a1, a2, b1.neg, b2.neg) 
}.play(Server.internal);
)

s.makeBundle(nil, { x.free });
::
