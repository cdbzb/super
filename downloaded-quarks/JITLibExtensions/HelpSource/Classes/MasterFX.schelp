TITLE:: MasterFX
summary:: a configurable chain of effects on the main outputs ot a server
categories:: Control>Effects
related:: Classes/ProxyChain, Classes/ProxyChainGui, Classes/MasterFXGui, Classes/ProxyChainPreset

Description::

A MasterFX can apply effects to the main output channels of a server. One can only make a single MasterFX for each server. Each masterFX contains a link::Classes/ProxyChain:: which handles the named effects slots and their state.

Note that MasterFX can be used with  ProxyChainPreset, see link::Classes/ProxyChainPreset::,
in the bottom examples.

First examples:

code::
(
s.boot;

// define which FX are going to be used.
// As MasterFX is based on ProxyChain, these FX are the same as in ProxyChain.
ProxyChain.add3(
	\leakDC,  \filter -> { |in, leak=0.99| LeakDC.ar(in, leak) },
	1,
	(\leak: [0.5, 0.999, \exp])
);
ProxyChain.add3(
	\rollClip, \filter -> { |in, clip=0.99, pole=0.2|
		OnePole.ar(in.clip2(clip), pole ** 0.7);
	},
	1,
	(
		\clip: [0.0, 1, \amp],
		\pole: [0, 0.95, \lin]
	)
);
ProxyChain.add3(
	\krush, \filter -> { |in, bits=16, downsamp=2|
		var krushed = in.round(0.5 ** bits);
		var down = Latch.ar(in, Impulse.ar(SampleRate.ir / downsamp.max(2)));
		// below 1/2 downsamp, do xfade:
		blend(in, down, (downsamp - 1).clip(0, 1));
	},
	1,
	(
		\bits: [16, 1],
		\downsamp: [1, 100, \exp]
	)
);

ProxyChain.add3(
    \comb, \filterIn -> { |in, decay = 3| CombL.ar(in * 0.3, 0.02, [0.03, 0.042], decay) },
    0.2,
    (decay: [0.2, 200, \exp])
);


ProxyChain.add3(
	\ampFin, \filter -> { |in, drive=1, ampLimit=0.8 |
		Limiter.ar(in * drive, ampLimit);
	},
	1,
	(
		\drive: [1, 10, \exp],
		\ampLimit: \amp
	)
);
);


(
// An 8-channel MasterFX on server s.
// The order in slotNames determines order of execution of the efx.
m = MasterFX.new(server: s,
	numChannels: 8,
	slotNames: [\leakDC, \krush, \rollClip, \ampFin],
	busIndex: 0
);

g = m.gui; // a GUI
s.scope(8);
)

// a test signal
x = { PinkNoise.ar(0.5) + SinOsc.ar([220, 330]) * LFNoise2.kr([5, 8, 13, 21]).max(0); }.play;

// all MasterFX live here:
MasterFX.all;

// kick in predefined effects (at full wet level)
m.add(\leakDC, 1);
m.set(\leak, 0.8); // filter lows

m.add(\krush, 1);  // bitcrush, downsample
m.set(\bits, 5, \downsamp, 6);

m.add(\ampFin, 1);  // limit output
m.set(\drive, 10, 0.3);

// kick out predefined effects (at full wet level)
m.remove(\leakDC);
m.remove(\rollClip);
m.remove(\krush);
m.remove(\ampFin);

// remove currently unused settings
m.proxy.cleanNodeMap;

// change slotNames - only while slots are off :
m.slotNames;
// this is -> Order[\leakDC, \krush, \rollClip, \ampFin]

// drop rollClip from the list:
m.slotNames = [\leakDC, \krush, \ampFin];


(
// make a more specific GUI - see ProxyChainGui for details
g = m.gui(\Mestre, 20, [
	[\leakDC, \slotCtl, 1],
	[\rollClip, \slotCtl, 1],
	[\krush, \slotCtl, 1],
	[\ampFin, \slotCtl, 1],
	[\RESET, \extra, { m.pxChain.add(\leakDC, 1).add(\ampFin, 1) }],
])
)

// remove a MasterFX by server name
MasterFX.clear(\localhost); // clear one specific masterfx

// or simply by
m.clear

// or clear all MasterFX
MasterFX.clear;

MasterFX.all;
::


CLASSMETHODS::

private:: initClass, make

METHOD:: all
dictionary for all masterFX, one per server.

METHOD:: default
the MasterFX instance for the default server.

METHOD:: maxNumChans
the maximum number of channels supported. (currently unused)

METHOD:: clear
clear the masterfx at name
ARGUMENT:: name


METHOD:: new

ARGUMENT:: server
the server on which the MasterFX chain will run; default is server.numOutputBusChannels

ARGUMENT:: numChannels
the number of channels it will work on

ARGUMENT:: slotNames
the names of the filters/functions to be used, in order of execution;

ARGUMENT:: busIndex
the bus index where it will process audio.


INSTANCEMETHODS::

METHOD:: key
the key at which the MasterFx is stored; usually this is the server name.

METHOD:: proxyChain
the link::Classes/ProxyChain:: that has the order of the effects that can be used

METHOD:: proxy
the link::Classes/NodeProxy:: inside the the proxyChain.

subsection::Methods that get forwarded to proxyChain/proxy:

METHOD:: add
kick in effect
ARGUMENT:: key
name of effect
ARGUMENT:: wet
wet-level of effect
ARGUMENT:: func
an optional func that can locally replace the global func with that name.

METHOD:: remove
kick out effect
ARGUMENT:: key
name of effect

Method:: set
set named parameters of the active slots

Method:: slotsInUse
get the currently used slots of the proxyChain
Method:: slotNames
get and set the slotNames of the proxyChain

METHOD:: server
the server on which this MasterFX operates

METHOD:: numChannels
the number of output channels of the MasterFX

METHOD:: busIndex
the index of the bus on which the MasterFX operates

METHOD:: group
the group in which this masterfx proxy runs.
this is after the default group.


METHOD:: checkingBadValues
flag whether the masterFX is checking the final output for bad values.
see also link::Classes/CheckBadValues::

METHOD:: checkBad
set flag whether to check final output, and if needed start the synth

METHOD:: badSynth
the synth that does the bad value checking.

METHOD:: wakeUp
Wake up the MasterFX proxy. This happens automatically after CmdPeriod.

METHOD:: clear
clear this MasterFX; usually so one can remake it.


private:: cmdPeriod, makeGroup, makeName, makeBus

METHOD:: pxChain
alias for the proxyChain (the proxyChain inst var was called pxChain earlier).


METHOD:: show, hide
show or hide the MasterFX proxy in Ndef.all for that server.
the proxy is hidden by default.


METHOD:: gui
make a MasterFXGui for the MasterFX.

ARGUMENT:: name
the name the gui will show

ARGUMENT:: numItems
the number of buttons / sliders for parameters the gui will have

ARGUMENT:: buttonList
an optional list of buttons. by default, this is the list of slotNames.

ARGUMENT:: parent
the parent view or window on which to place the gui
ARGUMENT:: bounds
the bounds of the gui

ARGUMENT:: makeSkip
a flag whether to make and start a skipjack for the gui update mechanism.


