TITLE:: NdefPreset
summary:: storing and morphing between presets for Ndefs
categories:: Undocumented classes
related:: Classes/ProxyPreset, Classes/PdefPreset, Classes/TdefPreset

DESCRIPTION::
Like ProxyPreset, NdefPreset stores settings and can morph between them.

code::
// same example as in link::Classes/ProxyPreset:: but using Ndef for Tdef:
(
    // make an empty Tdef
a = Tdef(\a);
    // give it some param settings
a.set(\dt, 0.1, \freq, 440, \bend, 4, \bendVar, 4, \sustain, 0.05);

// add specs for the params to the Tdef - see Halo class.
a.addSpec(\dt, [0.03, 3, \exp]);
a.addSpec(\bend, [-24, 24, \lin]);
a.addSpec(\bendVar, [-24, 24, \lin]);
a.addSpec(\sustain, [0.003, 3, \exp]);

// define what the Tdef does
Tdef(\a, { |env|
    loop({
        (
            instrument: \pingbend,
            freq:  env[\freq],
            bend: env[\bend] + env[\bendVar].rand2,
            sustain: env[\sustain],
            pan: 1.0.rand2
        ).play;

        env[\dt].wait;
    })
});

Tdef(\a).gui;

    // will be using this SynthDef:
s.boot;
SynthDef(\pingbend,
    { arg out=0, freq=440, bend = 4, sustain=0.05;
        var env = EnvGen.ar(Env.perc(0.001, sustain, 0.3), doneAction:2);
        freq = freq * XLine.kr(1, bend.midiratio, sustain);
        Out.ar(out, SinOsc.ar(freq, 0, env))
    }).add;

)

// brain transplant
Ndef(\a, { arg freq=440, bend = 4, sustain=0.05, dt = 0.1;
	var trig = Impulse.ar(1/dt);
	var env = EnvGen.ar(Env.perc(0.001, sustain, 0.3), trig);
	freq = freq * EnvGen.ar(Env([1, bend.midiratio], [sustain], \exp), trig);
	Pan2.ar(SinOsc.ar(freq, 0, env), TRand.ar(-1.0, 1.0, trig));
});

Tdef(\a).envir.keysValuesDo { |k, v| Ndef(\a).set(k, v) };
Ndef(\a).addHalo(\spec, Tdef(\a).getSpec);
Ndef(\a).getSpec === Tdef(\a).getSpec;

Ndef(\a).play;

Ndef(\a).gui;
    // then make a ProxyPreset for for the Tdef:
    // for Tdefs, best use TdefPreset.
b = NdefPreset(Ndef(\a));

// these are the param names for which settings are stored
// they can be reordered, see ParamGui help file.
b.namesToStore;
// in emergencies:
NdefPreset.all.clear;
Ndef(\a).addHalo(\namesToStore, Ndef(\a).controlKeys);
NdefPreset(Ndef(\a));

    // add the current state of the envir as a setting
b.addSet(\ada);

    // make and add 3 random settings
(
b.setRand(0.25); b.addSet(\bobo);
b.setRand(0.25); b.addSet(\coco);
b.someRand(0.25, 0.5); b.addSet(\dad);
)
    //
b.getSetNames;
b.settings.printcsAll;"";

b.setCurr(b.getSetNames.choose.postln);
b.setTarg(b.getSetNames.choose.postln);


// a gui for the NdefPreset
g = NdefPresetGui(b, 8).moveTo(10, 200);

b.morph(1.0.rand, \ada, \coco);

b.xfadeTo(\coco, 3, { "xfade doneFunc done.".postln; });
b.xfadeTo(b.getSetNames.choose.postln, exprand(0.3, 10));

// do recursive crossfading
(
f = {
    "next xfade: ".post;
    b.xfadeTo(b.getSetNames.choose.postln, exprand(0.3, 10), f)
};

f.value;
)
f = nil; // stop

// set relative to a preset:
b.getSetNorm(\coco);
b.proxy.setUni(*(b.getSetNorm(\curr) + [0.1.rand2]).flat);

b.setRelFrom(\coco, { 0.3.rand2 }.dup(b.namesToStore.size))
::

CLASSMETHODS::

METHOD:: all
the global dict for all NdefPreset instances

METHOD:: proxyClass
the class to be used with NdefPreset: Ndef.

private:: initClass

METHOD:: new
access an existing NdefPreset or make a new one for a Ndef.

ARGUMENT:: key
If key is key of an existing NdefPreset, then that is accessed. If key is a Ndef, then a net NdefPreset with that Ndef's key will be created.

ARGUMENT:: namesToStore
which paramNames to store in the presets. if none given, inferred from the current proxy settings.

ARGUMENT:: settings
provide preset settings for the proxy

ARGUMENT:: specs
provide preset specs for the proxy, mainly for randomizing and morphing.
if none given here, and object has a halo of specs, those in halo will be used.

ARGUMENT:: morphFuncs
special functions to provide for morphing between non-numerical settings.
not used yet.


INSTANCEMETHODS::

private:: proxy, prAdd

METHOD:: key
the key under which the NdefPreset is stored in NdefPreset.all

METHOD:: getFromProxy
get current values for namesToStore from proxy, except those given in <except>



EXAMPLES::

code::
to follow
::