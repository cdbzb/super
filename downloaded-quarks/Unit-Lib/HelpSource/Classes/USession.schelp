CLASS:: USession
summary:: (put short description here)
categories:: UnitLib
related:: Classes/SomeRelatedClass, Reference/SomeRelatedStuff, etc.

DESCRIPTION::
(put long description here)


CLASSMETHODS::

METHOD:: new
(describe method here)

argument::  ... objects
(describe argument here)

returns:: (returnvalue)

METHOD:: current
(describe method here)

returns:: (returnvalue)

METHOD:: acceptedClasses
(describe method here)

returns:: (returnvalue)


INSTANCEMETHODS::

METHOD:: objects
(describe method here)

returns:: (returnvalue)

METHOD:: name
(describe method here)

argument:: x
(describe argument here)

returns:: (returnvalue)

METHOD:: init
(describe method here)

argument:: inObjects
(describe argument here)

returns:: (returnvalue)

METHOD:: at
(describe method here)

argument:: index
(describe argument here)

returns:: (returnvalue)

METHOD:: add
(describe method here)

argument:: items
(describe argument here)

returns:: (returnvalue)

METHOD:: remove
(describe method here)

argument:: item
(describe argument here)

returns:: (returnvalue)

METHOD:: prepareAndStart
(describe method here)

argument:: targets
(describe argument here)

returns:: (returnvalue)

METHOD:: startChains
(describe method here)

argument:: targets
(describe argument here)

returns:: (returnvalue)

METHOD:: startScores
(describe method here)

argument:: targets
(describe argument here)

returns:: (returnvalue)

METHOD:: release
(describe method here)

returns:: (returnvalue)

METHOD:: gui
(describe method here)

returns:: (returnvalue)

METHOD:: getInitArgs
(describe method here)

returns:: (returnvalue)

METHOD:: storeArgs
(describe method here)

returns:: (returnvalue)

METHOD:: onSaveAction
(describe method here)

returns:: (returnvalue)


EXAMPLES::

code::
(
f = { 12.collect({ |i|
		var evt;
		evt = UChain(i/2,i+1,rrand(3.0,10.0),false,\sine, \output).fadeOut_(1).fadeIn_(1);
		evt.units[0].set(\freq,rrand(200.0,600.0) );
		evt;
	}) };
z = UScore(*(12.collect({ |i|
		var evt;
		evt = BufSndFile("sounds/a11wlk01-44_1.aiff", 
				rate: (i-6).midiratio, loop: [true,false].wrapAt(i) ).makeUChain
				.releaseSelf_(true).startTime_(i/2).track_(i).fadeOut_(1).fadeIn_(1);
		
		if( evt.duration == inf ) {
			evt.duration = 8; // looped events stopped by UScore
		};
		evt;
	})++f.()++[
	UScore(*f.()++[
		UScore(*f.())
	]
)]));
z.cleanOverlaps;
x = USession(z,UChain(\sine,\output),UChain(\sine,\output),UChain(\sine,\output),UChain(\sine,\output)
,UChainGroup(UChain([\sine,[\freq,200]],\output),UChain([\sine,[\freq,400]],\output)));
y = USessionGUI(x);
)
::
