//agents.
//with mouse controlling world gravity
//with sound

(
s.waitForBoot{
	var width= 300, height= 300, w, wgrav, world, n= 4,
	objsFunc, fmbusses, rmbusses, delay, dist, drums;

	//--synthesis
	SynthDef(\teknoDrum, {|out= 0, t_trig= 0, fmbusin= 50, fmbusout= 60, rmbusin= 70, rmbusout= 80, fmsend= 0, fmamount= 0, rmsend= 0, rmamount= 0, freq= 60, atk= 0.01, dec= 0.2, pitchatk= 0.01, pitchdec= 0.2, env= 0, pol= 1, amp= 1, pan= 0|
		var dry, wet, src, fmod, rmod, freq2, aenv, penv;
		fmod= InFeedback.ar(fmbusin, 1)*(fmamount*5000);
		rmod= InFeedback.ar(rmbusin, 1);
		penv= EnvGen.kr(Env.perc(pitchatk, pitchdec), t_trig, env*pol);
		freq2= freq+penv;
		aenv= EnvGen.kr(Env.perc(atk, dec), t_trig, t_trig);
		dry= SinOsc.ar(freq2+fmod, 0, aenv);
		wet= dry*rmod;
		src= XFade2.ar(dry, wet, rmamount*2-1);
		Out.ar(fmbusout, src*fmsend);
		Out.ar(rmbusout, src*rmsend);
		Out.ar(out, Pan2.ar(src, pan, amp));
	}).add;

	SynthDef(\teknoDist, {|in= 0, out= 0, lp= 127, hp= 0, res= 0.3, lfo= 0.1, dp= 0, env= 0.01, spd= 3, dis= 0, mix= 0|
		var dry, wet, lfosc, envfollow;
		dry= Limiter.ar(In.ar(in, 2));
		envfollow= dry.mean;
		envfollow= ((envfollow<0)*(envfollow* -1))+((envfollow>0)*(envfollow));
		envfollow= Clip.ar(LPF.ar(envfollow, spd, 2), 0, 1);
		envfollow= envfollow*env;
		lfosc= SinOsc.ar(lfo, 0, dp)+envfollow;
		wet= RHPF.ar(RLPF.ar(dry, (lp+lfosc).midicps, res), hp.midicps, 2);
		wet= (wet*(dis+1)).softclip;
		Out.ar(out, XFade2.ar(dry, wet, mix*2-1));
	}, #[0, 0, 0.1, 0.1, 0.1, 0, 0, 0, 0, 0, 0]).add;

	SynthDef(\teknoDelay, {|in= 0, out= 0, lp= 127, hp= 0, lfo= 0.1, dp= 0, bpm= 120, sub= 2, fn= 0, fb= 0.1, mix= 0|
		var dry, wet, lfosc, ms, feedback, del;
		feedback= LocalIn.ar(2);
		ms= bpm.pow(-1)/4*sub*60000;
		lfosc= SinOsc.ar(lfo, 0, dp);
		del= DelayC.ar(feedback, 2, ((lfosc+ms)-(ms/sub*fn)/1000).clip(0, 2), fb);
		dry= Limiter.ar(In.ar(in, 2));
		wet= RHPF.ar(RLPF.ar(dry, lp.midicps, 1), hp.midicps, 1);
		wet= wet+del;
		LocalOut.ar(wet);
		Out.ar(out, XFade2.ar(dry, wet, mix*2-1));
	}, #[0, 0, 0.1, 0.1, 0, 0, 0, 0, 0, 0, 0]).add;

	SynthDef(\teknoBusses, {|in= 80, out= 70|
		var input, mix0, mix1, mix2, mix3;
		input= In.ar(in, 4);
		mix0= input[1]+input[2]+input[3];
		mix1= input[0]+input[2]+input[3];
		mix2= input[0]+input[1]+input[3];
		mix3= input[0]+input[1]+input[2];
		Out.ar(out, [mix0, mix1, mix2, mix3]);
	}).add;
	s.sync;

	fmbusses= Synth(\teknoBusses, [\out, 50, \in, 60]);
	rmbusses= Synth(\teknoBusses, [\out, 70, \in, 80]);
	delay= Synth(\teknoDelay, [\out, 0, \in, 12, \mix, 0.3]);
	dist= Synth(\teknoDist, [\out, 12, \in, 10, \mix, 0.99, \res, 1.2]);
	drums= [
		Synth(\teknoDrum, [\out, 10, \fmbusin, 50, \fmbusout, 60, \rmbusin, 70, \rmbusout, 80]),
		Synth(\teknoDrum, [\out, 10, \fmbusin, 51, \fmbusout, 61, \rmbusin, 71, \rmbusout, 81]),
		Synth(\teknoDrum, [\out, 10, \fmbusin, 52, \fmbusout, 62, \rmbusin, 72, \rmbusout, 82]),
		Synth(\teknoDrum, [\out, 10, \fmbusin, 53, \fmbusout, 63, \rmbusin, 73, \rmbusout, 83]),
	];
	s.sync;

	//--world
	w= RedWindow("agents test tekno", Rect(128, 64, width, height)).front;
	wgrav= RedVector2D[0, 0.98];
	world= RedWorld3(RedVector2D[width, height], wgrav, 20, 0.9);	//dim,grav,maxvel,damp

	//--objects
	objsFunc= {
		var loc= RedVector2D[width, height].rand;
		var obj= RedAgent(world, loc, RedVector2D[0.5, 0.5].rand2, nil, 1, 10)	//world,loc,vel,acc,mass,size
		.maxForce_(4).wchange_(0.7).wdistance_(1).wradius_(5);
		obj.state= (
			\fmamount: 0,
			\fmsend: 1,
			\rmamount: 0,
			\rmsend: 1,
			\freq: 60.rrand(72).round(4).midicps,
			\atk: 0,
			\dec: 0.4,
			\pitchatk: 0.1.rand,
			\pitchdec: 0.7.rand,
			\env: 20.rand.midicps,
			\pol: 1,
			\amp: Pseq({1.0.rand2.round(0.25).clip(0, 1)}.dup([8, 14, 16].choose), inf).asStream,
			\level: 0
		);
	};
	objsFunc.dup(n);

	//--sequence
	Tdef(\seq, {
		loop{
			drums.do{|d, i|
				var amp= world.objects[i].state[\amp].next;
				world.objects[i].state[\level]= amp;
				if(amp>0, {
					d.set(\t_trig, 1, \amp, amp);
				});
			};
			(1/(100/60)/4).wait
		}
	}).play;

	//--loop
	w.draw{
		var replace= world.objects.choose;
		if(0.005.coin, {
			replace.postln;
			world.remove(replace);
			objsFunc.value;	//die and replace with new one
		});
		world.gravity= w.mouse/RedVector2D[width, height]-0.5;
		world.objects.do{|o, i|
			o.addForceWander2D;
			o.addForceSeek(world.objects.wrapAt(i-1).loc);
			world.objects.do{|oo, j|
				if(i!=j, {
					o.state[\fmamount]= (width-o.loc.distance(oo.loc)/width).clip(0, 1);
					o.state[\rmamount]= (width-o.loc.distance(oo.loc)/width).clip(0, 0.6);
				});
			};

			o.addForce(world.gravity);
			o.update;
			world.contain(o);
			drums[i].set(
				\fmamount, o.state[\fmamount]*(3-o.vel.mag),
				\fmsend, o.state[\fmsend],
				\rmamount, o.state[\rmamount]*(3-o.vel.mag),
				\rmsend, o.state[\rmsend],
				\freq, o.state[\freq],
				\atk, o.state[\atk]*(3-o.vel.mag).clip(0, 1),
				\dec, o.state[\dec]*(o.wtheta/2pi),
				\pitchatk, o.state[\pitchatk]*(o.wtheta/2pi),
				\pitchdec, o.state[\pitchdec],
				\env, height-o.loc[1],	//\env, o.state[\env],
				\pol, o.state[\pol],
				\pan, o.loc[0]/width*2-1
			);

			//--render
			Pen.fillColor= Color.grey(o.state[\level]*0.85+0.15, 0.5);
			Pen.fillRect(Rect.aboutRedObject2D(o));
		};
	};
	w.animate= true;
	CmdPeriod.doOnce({w.close});
	w.onClose= {
		Tdef(\seq).stop;
		fmbusses.free;
		rmbusses.free;
		delay.free;
		dist.free;
		drums.do{|x| x.free};
	};
})